
THE ORDER OF ALL PLOTS
'Aborigine', 'Saqqaq', 'Neand.Altai', 'Denisova', 'Ust.Ishim', 'K14', 'Clovis','Motala','Loschbour','Stuttgart','NE1','Labrana', 'BR2'
awk '{print > $6".bed"}' PROM_autosom_wochr.promcat.joined

sampleorder <- c('Aborigine', 'Saqqaq',Neand.Altai', 'Denisova', 'Ust.Ishim', 'K14', 'Clovis', 'Loschbour', 'Stuttgart', 'Motala', 'NE1', 'BR2', 'LaBrana')
df$x <- factor(df$x, levels=sampleorder)  ## this is for facet_grid
## this is the order of the bar plot facet
barplotorder <- c(Shelves.5', Shores.5', CGI, Shores.3', Shelves.3','High', 'Intermediate', Low', 'Exon.Splice.5', Intron.Splice.5', Intron.Splice.3', Exon.Splice.3')
df$x <- factor(df$x, levels=sampleorder)

cut -f 1,2,3  cpgislandsentiregenome.bed | sed 's/chr//g' | sed -rn '/^[1-9]+\t/ p' | sort -V -k 1,1 -k 2,2 > CPGISL.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $2-4000,$2-2000}'  CPGISL.bed > SHELF5_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $2-2000,$2}'  CPGISL.bed > SHORE5_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $3,$3+2000}'  CPGISL.bed > SHORE3_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $3+2000,$3+4000}'  CPGISL.bed > SHELF3_autosom_wochr.bed

/home/krishang/data/bedfiles/SHELF5_autosom_wochr.bed
/home/krishang/data/bedfiles/SHORE5_autosom_wochr.bed
/home/krishang/data/bedfiles/SHORE3_autosom_wochr.bed
/home/krishang/data/bedfiles/SHELF3_autosom_wochr.bed

#for f in `find ./ -iname "*.fastq" -type f`; do echo $f; tail -n 4 $f; echo -e '\n'; done
tail -n 1 altaiNea/000_data/simureads_1.fastq | wc -c
truncate --size=-166 altaiNea/000_data/simureads_1.fastq

# hair joining:
join -t '       ' -1 2 -2 3 <(zcat Rsscores_GEBO2000.txt.gz| cut -f 12,25,26,27,28 | sort -k 2) <(sort -k 3 ensembletorefseq.txt) | sed -n '/Aborigin\|Saqqaq/ p' > expressionanalyses_hair/RSvalues.txt

join -t '       ' -1 3 -2 6 <(cut -f 1,2,4,6,9,10,11 ~/data/expressiondata/hair_affymetrix_GSE3419.tsv | sed -n '/high quality/ p'| sed -n '/GSM77091/ p' |
sort -k 3) <(sort -k 6 RSvalues.txt) > combineddata.txt

# bone joining:
join -t '      ' -1 2 -2 3 <(zcat Rsscores_GEBO2000.txt.gz| cut -f 12,25,26,27,28 | sort -k 2) <(sort -k 3 ensembletorefseq.txt) | sed '/Aborigin\|Saqqaq/ d' > expressionanalyses_bones/RSvalues.txt

join -t '      ' -1 3 -2 6 <(sed -n '/high quality/ p' /home/krishang/data/expressiondata/bone_affy_tsv |
sed -n '/Ost33/ p' |sort -k 3) <(sort -k 6 RSvalues.txt) > combineddata.txt



# run this in the paper folder. get out all the scripts used for the paper
find ./  -type f| grep '.sh$\|.py$\|.R$'


# writefile
fout = open('here.txt.gz', 'wb')
f=subprocess.Popen(('gzip','-c'), stdout=fout, stdin=subprocess.PIPE)
f.stdin.write('1231231231231231231312')
f.stdin.write('1231231231231231231312')
f.stdin.write('asdf')
f.stdin.close()

# read file
a = subprocess.Popen(('zcat', 'cpgrelatedSNP.txt.gz'), stdout=subprocess.PIPE)
a.stdout.next()
## or line in a.stdout:
# writefile


Minor Groove  Major Groove:
Hey,

I read some of them during my phd. For example:
http://www.nature.com/nature/journal/v461/n7268/pdf/nature08473.pdf
http://www.ncbi.nlm.nih.gov/pubmed/21967305
http://rohslab.cmb.usc.edu/Papers/2015_GBshape.pdf
http://nar.oxfordjournals.org/content/41/W1/W56
...
and mucho more


but I remember those while reading the news in genome research:
http://rohslab.cmb.usc.edu/Papers/2015_Levo_GR.pdf

In general you have to look the publications of Thomas Tullius (hydroxyl radical cleavage pattern), Rohs lab (DNA shape/topology),  Eran Segal (nucleosome positioning in general). Their theories apply to all protein-DNA interactions beyond nucleosomes.

See you now!!

PAblo  


tmux list-sessions
0: 4 windows (created Thu Jul 30 17:24:14 2015) [208x55]
## opened a franklin tmux in franklin
tmux new -s franklintmux
tmux list-sessions
0: 4 windows (created Thu Jul 30 17:24:14 2015) [208x55]
## attach to a specific name
ta -t 0

for f in `find ./ -type f| grep -v CTCF`; do  echo $f; zcat $f|awk '{d+=$3;t+=$4} END {print d,t,d/t}';done

zcat intron_raw.txt.gz | sed 's/chr//g' | sed -rn '/^[1-9]+\t/ p' | sort -V -k 1,1 -k 2,2|  bedtools merge -s | sort -V -k 1,1 -k 2,2  > INTRONS_autosom_wochr_new.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $2,$2+100,$4}' INTRONS_autosom_wochr_new.bed > INTRONFIVE_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $3-100,$3,$4}' INTRONS_autosom_wochr_new.bed > INTRONTHREE_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $3,$3+100,$4}' INTRONS_autosom_wochr_new.bed > EXONTHREE_autosom_wochr.bed
awk 'BEGIN {OFS="'\\t'"} {print $1, $2-100,$2,$4}' INTRONS_autosom_wochr_new.bed > EXONFIVE_autosom_wochr.bed



plot(df[which(df$bedcoord=='1_3668564_3669964'),c(2,4)]);dev.off()


files=list.files(pattern='Depth_CONSERVEDARRAY.txt.gz')
require(ggplot2)
func <- function(f){
print(f)
df=read.table(f)
# df[,1] = df[,1]-(max(df[,1])/2)  # check that it is correct
pdf(paste0(strsplit(f[1], '\\.')[[1]][1], '.pdf'))
print(ggplot(df[df$V2<34445000,], aes(V2,V3))+geom_bar(stat='identity')+labs(title='depth'))
print(ggplot(df[df$V2<34445000,], aes(V2,V4))+geom_bar(stat='identity')+labs(title='score'))
dev.off()
}
parallel::mclapply(files,func,mc.cores=3)


df=read.table('Saqqaq_WriteDepth_CONSERVEDARRAY.txt.gz')



## python analyzeWriteDepthMerge.py Denisova/Denisova_WriteDepth_CTCF.txt.gz > denisovactcf.txt
require(ggplot2)
require(gridExtra)
files=list.files(pattern='ctcf_new')
#files=list.files(pattern='TSS.')
files=files[!grepl('pdf',files)]
files=files[grepl('.txt',files)]
func <- function(f){
print(f)
df=read.table(f,h=T)
if(max(df[,1]>1500)){
  df[,1] = df[,1]-(max(df[,1])/2)  # check that it is correct
  } else {
  df[,1] = df[,1]-400
  } 
pdf(paste0(strsplit(f[1], '\\.')[[1]][1], '.pdf'))
p1 = ggplot(df, aes(relapos,depth))+geom_point()+labs(title='depth')
p2 = ggplot(df, aes(relapos,score))+geom_point()+labs(title='score')
grid.arrange(p1,p2,nrow=2, ncol=1)
# plot(df[,c(1,2)],main='depth')
# plot(df[,c(1,3)],main='score')
dev.off()
}
lapply(files,func)

awk 'BEGIN {OFS="'_'"} {print $1,$2,$3"\t"$4"\t"$5}' TSS2kb_autosome_wochr.bed > TSS_join_to_epipaleomix.txt

python /home/krishang/install/epipipe/epipaleomix/tools/filtermappa.py /home/krishang/data/reference_human/mappability_51/GENOME_51_50.40000-20000.mappability 0.9 | bedtools intersect -wb -a stdin -b  /home/krishang/data/bedfiles/chromosome22_wochr.bed |
       sort -V -k 4,4 -k 5,5 -k 2,2 | python /home/krishang/install/epipipe/epipaleomix/tools/updatebedcoord.py


indent marked lines:
if left -4 or -8 ...
if right 4 or 8 ...
What works for me is: select region and then C-u <number of spaces> C-x TAB

intersect  -wb -wa -a ../reference_human/mappability_31/GENOME_31_50.40000-20000.mappability  -b conservednucleosomearray_HG19_wochr_withname.bed | awk  'BEGIN {OFS="'\\t'"} {if($5>0.9){print $1,$2,$3,$9}}'

intersect   -a ../reference_human/mappability_31/GENOME_31_50.40000-20000.mappability  -b conservednucleosomearray_HG19_wochr_withname.bed | awk  'BEGIN {OFS="'\\t'"} {if($5>0.9){print $1,$2,$3,$9}}'

Had some problems with collapsed quality scores so had to avoid trimming of the already trimmed reads:
first add Single: after Lane: to the make file
#create the folders:
mkdir -p SimuProject/reads/Simureads/Onlyreads/Lane_2/
mkdir -p SimuProject/reads/Simureads/Onlyreads/Lane_1/
#finally add to files:
touch SimuProject/reads/Simureads/Onlyreads/Lane_2/reads.pretrimmed.validated
touch SimuProject/reads/Simureads/Onlyreads/Lane_1/reads.pretrimmed.validated
## as im using the same simulated reads twice (the bases are of course different)
# i get an duplication error. therefore need to add these lines:
mkdir -p SimuProject/000_prefixes/Simureads
touch SimuProject/000_prefixes.duplications_checked
touch SimuProject/000_prefixes/Simureads/Onlyreads.duplications_checked


The biological function of gene body methylation is yet to be elucidated but there is an interesting relationship between gene body methylation and gene expression, with moderately expressed genes more likely to be methylated than those that have very low or high levels of expression:
 - Feng S, Cokus SJ, Zhang X, et al. (2010) Conservation and divergence of methylation patterning in plants and animals
 - Zemach A, McDaniel IE, Silva P, et al. (2010) Genome-wide evolutionary analysis of eukaryotic DNA methylation
 - Zilberman D, Gehring M, Tran RK, et al. (2007) Genome-wide analysis of Arabidopsis thaliana DNA methylation uncovers an interdependence between methylation and transcription


## just some converting
awk '{if($4=="+"){print $1"\t"$2+3000"\t"$3+3000"\t"$4"\t"$5} else {print $1"\t"$2-3000"\t"$3-3000"\t"$4"\t"$5} }' TSS2kb_autosome_wochr.bed > GEBO2kb_autosome_wochr.bed

#### super cool pdftotext stuff:
awk '/^Upper Marker$/,/© Copyright 2003 - 2009 Agilent Technologies, Inc./' BA_E011-E012_020514_OK.txt >test  ## this one keeps stuff between Upper Marker and © Copyright 2003 - 2009 Agilent Technologies, Inc.
sed '/^$/ d; /Upper Marker/ d;/Average Size/ d; /Size distri/ d' test  |less  ## this one remove lines with several different names
sed -rn '/cycles/p; /^[0-9]+/ p' test | less  ## another cool


Do canonical factoring analyses with this R package:
   https://cran.r-project.org/web/packages/CCA/CCA.pdf
   http://stat.ethz.ch/R-manual/R-devel/library/stats/html/cancor.html
   https://cran.r-project.org/web/packages/FactoMineR/FactoMineR.pdf

###  /home/krishang/data/methylation/geneidentification
python filterfile_based_on_another.py ../Rsscores2000.txt.gz

## REMEMBER:: Redo the ctrl + v ; TAB every time join command is copied to terminal
join -t ' ' -1 2 -2 25 <(sort -k 2,2 HK_genes.txt) <(zcat Rsscores.txt.gz| sort -k 25,25) > HKjoinedwithRs.txt
cut -f 1,2,26,27 HKjoinedwithRs.txt > HKgenes_samples_Rsscore.txt

Rscript rescalemodel_compute.R 750 /disk/ginzburg/data/krishang/methyl_rawdata/bedcoord_MANYBASES_SNPsextra/AltaiNeanderthal_MethylMap_RRBSk1500_bedcoord.txt.gz /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed Altaimodel.Rdata

Rscript rescalemodel_compute.R 1000 /disk/ginzburg/data/krishang/methyl_rawdata/bedcoord_MANYBASES_SNPsextra/Saqqaq_MethylMap_methyl450k2000_bedcoord.txt.gz /disk/ginzburg/data/krishang/methylation/methyl450data/metdataDF/hairsample_GSM1179543_forrescalemodel.bed saqqaq.Rdata

take the mean of all Ms values in bin 1 and set all ms values in that bin equal to that value
take the mean of all Ms values in bin 10 and set all ms values in that bin equal to that value

them make a linear model as the extreme values have been handled.

bedtools intersect -wa -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/GEBO_autosom_wochr.bed > onlyRRBSoverlappingGEBO.bed
bedtools intersect -wa -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/PROM_autosom_wochr.bed > onlyRRBSoverlappingPROM.bed

awk '{if($4 ~/bone/){print}}' Homo_sapiens_expr-complete.tsv > bonegenes.tsv
sed '/marrow/ d' bonegenes.tsv > bonegenes_withoutmarrow.tsv


awk '{if($1~/GSM774041_Brain_1a_A/){print}}' brain_affy_tsv> brainonly1a_A.txt
join -j 2 <(sort -k 2 Ost40.txt) <(sort -k 2 brainonly1a_A.txt) -t '     ' > testfile.txt
It's kind of hard to show on SO that ' ' contained a TAB character. Type it with ^V TAB (e.g. in bash)  control + v tab
awk '{if($5!=$11){print $1}}' testfile.txt> differentexpression




nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py dryrun mk_nucl.yaml --max-threads 20 --destination nucl_rawdata/OUTPUT --temp-root nucl_rawdata/TEMP ; echo 'epipaleomix methylation run is finished' | mail -s "epipaleomix is finished" kristianhanghoej@gmail.com

http://lists.ensembl.org/ensembl-dev/msg00422.html
A simple way is to go to:
http://www.ensembl.org/Multi/martview
Choose the species for which you want to do the mapping.
On the next page, choose genes with Refseq DNA IDs only.
On the next page, under gene, choose the Ensembl Attributes you want and under External References, choose RefSeq DNA ID.
Then scroll to the bottom to choose the output format and hit export.


zcat GSE3058_series_matrix.txt.gz | sed '/^!/ d'|sed '/^$/d'| paste - <(cat IDtogenes.table)> GSE3058_withNM_names.txt
zcat GSE3058_series_matrix.txt.gz | sed '/^!/ d'|sed '/^$/d'| paste - <(cut -f 2 IDtogenes.table)> GSE3058_withNM_names.txt

promgebotogether=read.table('datadata.txt',h=T)
df = data.frame(methylpropGEBO=promgebotogether$methylpropGEBO, methylpropPROM=promgebotogether$methylpropPROM)
dfm=melt(df)
ggplot(dfm,aes(value,col=variable))+geom_bar(binwidth=.001,position='dodge')
df = data.frame(methylpropGEBO=promgebotogether$predictedGEBO, methylpropPROM=promgebotogether$predictedPROM)
dfm=melt(df)
ggplot(dfm,aes(value,col=variable))+geom_bar(binwidth=.001,position='dodge')

p <-  ggplot(mdf,aes(x=methylpropPROM)) +	
    stat_density(aes(ymax = ..density..,  ymin = -..density.., fill = V2, color = V2),
                 geom = "ribbon", position = "identity") +
                         facet_grid(~V2)+coord_flip() +
                             theme(legend.position="none", axis.ticks.x = element_blank(),
                                   axis.text.x = element_blank()) +
                                 labs(title='', y='', x='Methylation Score')


p <-  ggplot(mdf,aes(x=log(ratio))) +	
    stat_density(aes(ymax = ..density..,  ymin = -..density.., fill = V2, color = V2),
                 geom = "ribbon", position = "identity") +
                         facet_grid(~V2)+coord_flip() +
                             theme(legend.position="none", axis.ticks.x = element_blank(),
                                   axis.text.x = element_blank()) +
                                 labs(title='Rs score (Genebody/promoter)\n splitted by promoter categories', y='', x='Rs score')

p <-  ggplot(mdf,aes(x=log(ratios))) +	
    stat_density(aes(ymax = ..density..,  ymin = -..density.., fill = V2, color = V2),
                 geom = "ribbon", position = "identity") +
                         facet_grid(~V2)+coord_flip() +
                             theme(legend.position="none", axis.ticks.x = element_blank(),
                                   axis.text.x = element_blank()) +
                                 labs(title='Rs score (Genebody/promoter)\n splitted by promoter categories', y='', x='Rs score')


adding refseq id to the list. refseq	RefSeq ID
#zcat allgeneshg19.bed.gz | cut -f 1,2,3,4,5 |sed 's/chr//g' | sed '/_/ d' | gzip - > allgeneshg19_cleaned.bed.gz

bedtools intersect -wa -wb -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/PROM_autosom_wochr.bed > /disk/ginzburg/data/krishang/bedfiles/PROMRRBSOVERLAP.bed
bedtools intersect -wa -wb -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/GEBO_autosom_wochr.bed > /disk/ginzburg/data/krishang/bedfiles/GEBORRBSOVERLAP.bed
bedtools intersect -wa -wb -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/GEBO_HOUSEKEEPING_wochr.bed > /disk/ginzburg/data/krishang/bedfiles/GEBORRBSOVERLAPHOUSE.bed
bedtools intersect -wa -wb -a /disk/ginzburg/data/krishang/methylation/RRBS/ucscdownfiltered_collapsed_new/Osteobl.bed -b /disk/ginzburg/data/krishang/bedfiles/PROM_HOUSEKEEPING_wochr.bed > /disk/ginzburg/data/krishang/bedfiles/PROMRRBSOVERLAPHOUSE.bed

require(data.table)
files = list.files('/disk/ginzburg/data/krishang/bedfiles',full.names=T, pattern='RRBSOVERLAP.bed')

readdf <- function(f){
	a=fread(f, data.table=F)
	a$nampos = with(a, sprintf('%s_%s_%s',V6,V7,V8))
	split(a,a$nampos)
}
### this is one way of calculating the osteoblast methylation
f.calc <- function(idx, dfs){
	df = dfs[[idx]]
	data.frame('m'=mean(df[,5]), 'v'=var(df[,5]), 'sites'=nrow(df),'nampos'=idx)
}
### this is anotherway:  THIS WAY IS WAY WORSE. THE MEAN IS BETTER AS DONE ABOVE
#f <- function(idx){
#	df = dfs[[idx]]
#	if (df$V9[1] =='-'){
#		df$dist= with(df, abs((V8-500)-V2))
#	}else{
#		df$dist= with(df, abs((V7+500)-V2))
#	}
#	closest = min(df$dist)
#	data.frame('m'=mean(df[df$dist==closest,5]), 'v'=0, 'sites'=nrow(df[df$dist==closest,]),'nampos'=idx)
#}
#####

makemodel <- function(fRRBS, fmine, cov=500){
	dfs = readdf(fRRBS)
	df = do.call(rbind, parallel::mclapply(names(dfs),f.calc, dfs=dfs,mc.cores=5))
	df$v[is.na(df$v)] = 0
	sample = fread(sprintf('zcat %s',fmine),data.table=F)
	sample = sample[sample$coverage>=cov,]
	sample$nampos = sprintf('%s_%s_%s',sample[,1],sample[,2],sample[,3])
	mdf = merge(sample,df,by='nampos')
	mod = lm(m ~ methylprop*cpgread*deaminatedsites*CpGsites*deaminvariance*nodeaminvariance, data=mdf)
	#summary(mod)  # R-squared on .69  # R-squared on .72 housekeeping  # 
	data.frame('fitted'=mod$fitted.values, 'region' = mdf$nampos, 'residuals'=mod$residuals, 'ms'=mdf$methylprop, 'RRBS'=mdf$m)
}

fmine='/home/krishang/data/methyl_rawdata/bedcoord_PROMGEBO_SNPsextra/AltaiNeanderthal_MethylMap_PROM_bedcoord.txt.gz'
fRRBS = '/disk/ginzburg/data/krishang/bedfiles/PROMRRBSOVERLAP.bed'
prommod = makemodel(fRRBS,fmine)
fmine='/home/krishang/data/methyl_rawdata/bedcoord_PROMGEBO_SNPsextra/AltaiNeanderthal_MethylMap_GEBO_bedcoord.txt.gz'
fRRBS = '/disk/ginzburg/data/krishang/bedfiles/GEBORRBSOVERLAP.bed'
gebomod = makemodel(fRRBS,fmine)

together = read.table('/disk/ginzburg/data/krishang/bedfiles/PROMGEBOTOGETHER')
prommodselect = merge(prommod, together, by.x='region', by.y='V9')
promgebotogether = merge(gebomod, prommodselect, by.x='region', by.y='V10', suffixes=c('GEBO','PROM'))

python ~/install/epipipe/epipaleomix/tools/pileupdepth.py ../nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam conservednucleosomearray_HG19_wochr.bed saqout.txt.corrected.gz --GCmodel OUTPUTCHROM1/Saqqaq/GC_Model_Saqqaq.txt --FastaPath /home/krishang/data/reference_human/hs.build37.1.fa
python ~/install/epipipe/epipaleomix/tools/pileupdepth.py ../nucleosomes/aborigine/AusAboriginal.hg19.flt.sort.rmdup.realign.md.bam conservednucleosomearray_HG19_wochr.bed aboout.txt.corrected.gz --GCmodel OUTPUTCHROM1/Aborigin/GC_Model_Aborigin.txt --FastaPath /home/krishang/data/reference_human/hs.build37.1.fa
python ~/install/epipipe/epipaleomix/tools/pileupdepth.py ../nucleosomes/aborigine/AusAboriginal.hg19.flt.sort.rmdup.realign.md.bam conservednucleosomearray_HG19_wochr.bed aboout.txt.gz
python ~/install/epipipe/epipaleomix/tools/pileupdepth.py ../nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam conservednucleosomearray_HG19_wochr.bed saqout.txt.gz

## get scores based on read depths
python getscore.py saqout.txt.corrected.gz saqout.txt.corrected.score.gz
python getscore.py aboout.txt.corrected.gz aboout.txt.corrected.score.gz
python getscore.py aboout.txt.gz aboout.txt.score.gz
python getscore.py saqout.txt.gz saqout.txt.score.gz



##pwd: /disk/ginzburg/data/krishang/nucl_rawdata
saqcorr=read.table('saqout.txt.corrected.gz')
saq=read.table('saqout.txt.gz')
abo=read.table('aboout.txt.gz')
abocorr=read.table('aboout.txt.corrected.gz')
saqcorr=read.table('saqout.txt.corrected.score.gz')
saq=read.table('saqout.txt.score.gz')
abo=read.table('aboout.txt.score.gz')
abocorr=read.table('aboout.txt.corrected.score.gz')

stanford = read.table('output.txt')
mdf = na.omit(merge(stanford,abo,by='V2'))
with(mdf,cor(V5 , V3.y))

cor(saqcorr$V3,saq$V3)
cor(abocorr$V3,abo$V3)
cor(abocorr$V3[abocorr$V2%in%saqcorr$V2], saq$V3)
cor(abocorr$V3[abo$V2%in%saqcorr$V2], saqcorr$V3)
cor(abo$V3[abo$V2%in%saqcorr$V2], saqcorr$V3)
cor(abo$V3[abo$V2%in%saqcorr$V2], saq$V3)

cor.test(saqcorr$V3,saq$V3)
cor.test(abocorr$V3,abo$V3)
cor.test(abocorr$V3[abocorr$V2%in%saqcorr$V2], saq$V3)
cor.test(abocorr$V3[abo$V2%in%saqcorr$V2], saqcorr$V3)
cor.test(abo$V3[abo$V2%in%saqcorr$V2], saqcorr$V3)
cor.test(abo$V3[abo$V2%in%saqcorr$V2], saq$V3)





require(data.table)
saq = fread('zcat compare_saqcons.txt.gz',data.table=F)
abo = fread('zcat compare_abocons.txt.gz',data.table=F)
saq$nampos = with(saq, sprintf('%s_%s_%s',V1,V2,V3))
abo$nampos = with(abo, sprintf('%s_%s_%s',V1,V2,V3))


library(GenomicRanges)
saqGRE = with(saq, GRanges(V1, IRanges(V2,V3)))
aboGRE = with(abo, GRanges(V1, IRanges(V2,V3)))

hitssaq = countOverlaps(saqGRE,aboGRE)
hitsabo = countOverlaps(aboGRE,saqGRE)
saqGRE = saqGRE[hitssaq==1]
aboGRE = aboGRE[hitsabo==1]


hits = findOverlaps(saqGRE, aboGRE)
saqGRE = saqGRE[queryHits(hits)]
aboGRE = aboGRE[subjectHits(hits)]

dfsaq = as.data.frame(saqGRE)
dfabo = as.data.frame(aboGRE)

saq =  saq[(saq$nampos %in% with(dfsaq, sprintf('%s_%s_%s',seqnames,start, end))), ]
abo =  abo[(abo$nampos %in% with(dfabo, sprintf('%s_%s_%s',seqnames,start, end))), ]

cor(saq$V5,abo$V5)
cor(saq$V4,abo$V4)

# adds chr to the nucleosome
zcat ../nucl_rawdata/compareoutput.txt.gz | cut -f 1,2 | sed 's/^/chr/' >nucleosomes.txt
## this is better:
zcat ../nucl_rawdata/compareoutput.txt.gz | awk '{print "chr"$1"\t"$2"\t"$2}' > nucleosomes.txt
zcat ../nucl_rawdata/compareoutput.txt.gz | awk '{print "chr"$1"\t"$2"\t"$2+1}' > nucleosomes.txt
zcat ../nucl_rawdata/compareoutput.txt.gz | awk '{print "chr"$1"\t"$2"\t"$2+1"\t"$3"\t"$4}' > nucleosomes.txt


zcat Saqqaq_MethylMap_methyl450k2000_bedcoord.txt.gz | awk '{s+=$4;t+=$5} END {print s,t,NR}'
4186599 829594272 472769

## BWTOOLS TO EXTRACT DATA FROM BIGWIG FILES:
~/install/bwtools/bwtool/bwtool extract bed test.bed wgEncodeSydhNsomeK562Sig.bigWig output.txt

awk '{if($1 ~ /^22_/){print}}' snppos.txt >test.txt

paste -d '_' <(zcat cpgrelatedSNP.txt.gz| cut -f 1) <(zcat cpgrelatedSNP.txt.gz|cut -f 2) > snppos.txt
nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py run mk_newmeth_RRBS_450k_hoxd_manybases.yaml --max-threads 30 --destination methyl_rawdata/OUTPUTMANYPROMGEBO --temp-root methyl_rawdata/TEMPMANYPROMGEBO > /dev/null ; echo 'epipaleomix methylation run is finished' | mail -s "epipaleomix is finished" kristianhanghoej@gmail.com


Delete files that begin with Y or M or U 
sed -i '/^[YMU]/ d' testfiles.txt
# removes all lines with a underscore somewhere. it was all these weird chromosoems in snp database. SNP snp 142
sed '/_/ d' testfiles.txt > t.txt

zcat snp142Common.txt.gz | cut -f 2,3,4,5,7,9,10 | sed 's/chr//g' | sed '/_/ d' | sed '/^[YMUX]/ d' | sort -k 1,1n -k 2,2n | gzip - > snp142.txt.gz


sed '/^[1-9][0-9]?\t/ d' testfiles.txt > t.txt

zcat snp142.txt.gz | awk '{if($1 == "22"){print}}'| gzip - > chrome22.txt.gz

zip hoxd10.zip `find . -iname '*HOXD10*'|grep -v 'SS\|DS'`
zip ZDHHC4.zip `find . -iname '*ZDHHC4*'|grep -v 'SS\|DS'`

nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py run mk_newmeth_RRBS_450k_hoxd_manybases.yaml --max-threads 30 --destination methyl_rawdata/OUTPUTMANYBASES --temp-root methyl_rawdata/TEMPMANYBASES > /dev/null ; echo 'epipaleomix methylation run is finised' | mail -s "epipaleomix is finished" kristianhanghoej@gmail.com

## turning GSE files into id and genomic position files:
sed '/^#\|unmapped/ d' GPL6480-9577.txt | cut -f 1,13 | sed 's/:/\t/g'| sed 's/-/\t/g' |less

## this is for the 27k methylation. its build 36:
zless GPL8490_HumanMethylation27_270596_v.1.2.csv.gz | cut -d ',' -f 1,9,10 |sed -r '/^cg/ !d'| sed 's/,/\t/g' | sed '/X\|Y\|M/ d' > coordinates_autosome.txt
seq `wc -l coordinates_autosome.txt | cut -f 1 -d ' '` | awk 'BEGIN {d=0;p="+"} {if($0>d){d+=1}{print p}}' > tmp.test ## creates a list of pluses
paste <(cut -f 2 coordinates_autosome.txt) <(cut -f 3 coordinates_autosome.txt) <(cut -f 3 coordinates_autosome.txt) tmp.test <(cut -f 1 coordinates_autosome.txt)| sort -k 1n -k 2n -k 3n > coordinates.bedformat

### merge multiple data.frames and PCA PLOT
getnames <- function(f){
    nam <- unlist(strsplit(f, '/'))
    unlist(strsplit(nam[length(nam)], '_'))[1]
}

getnames.unfilt <- function(f){
    nam <- unlist(strsplit(f, '/'))
    unlist(strsplit(nam[length(nam)], '\\.'))[1]
}

getlengthtocenter <- function(f){
    nam <- unlist(strsplit(f, '/'))
    as.numeric(unlist(strsplit(unlist(strsplit(nam[length(nam)],'_'))[3],'k'))[2])/2
}
readsampledf <- function(f){
    lengthtocenter <- getlengthtocenter(f)
    nam <- getnames(f)
    print(nam)
    df <- fread(sprintf('zcat %s', f), data.table=FALSE,h=T)
    print(nrow(df)) ## removing zeros and top values
    if(nrow(df)>5000){
        df$nampos <- sprintf('%s_%s', df[,1], df[,2]+lengthtocenter)
        names(df)[names(df)=='methylprop'] <- nam
        df[,c(nam,'nampos', 'coverage')]
    }
}

makecutoff <- function(idx,cov=100){
	df=dfsraw[[idx]]
    df[df$coverage>=cov,c(1,2)]
}

na.to.mean <- function(n){
	M[is.na(M[,n]),n] = colm[n]
	M[,n]
}

samplefiles <- list.files('/home/krishang/data/methyl_rawdata/bedcoord_RRBSk1500', pattern='bedcoord.txt.gz',full.names=T)
samplefiles <- samplefiles[grepl('RRBS', samplefiles)]
dfsraw <- parallel::mclapply(samplefiles,readsampledf,mc.cores=4)
names(dfsraw) = 1:length(samplefiles)
dfs<-parallel::mclapply(names(dfsraw),makecutoff,cov=100,mc.cores=4)
data <- Reduce(function(x, y) merge(x, y, by=c("nampos"),all=TRUE), dfs, accumulate=F)   # THIS WORKED
M = as.matrix(data[,-1])
colm <- colMeans(M,na.rm=T)
M.new<-do.call(cbind, parallel::mclapply(names(colm),na.to.mean,mc.cores=4))
colnames(M.new) = names(colm)
M=M.new
rm(M.new)

X<-t(M)%*%M
sites=nrow(M)
X<-X/(sum(diag(X))/(sites-1))
E<-eigen(X)
require(ggplot2)
plotdf = data.frame(E$vectors)
plotdf$nam = colnames(M)
ggplot(plotdf, aes(X1,X2,col=nam))+geom_point();dev.off()
## pca plot ends here

# this is for plotting METHYLATION DATA SUCH AS RRBS AND 450K
require(ggplot2)
require(reshape2)
df = read.table('BIGDF_RRBSlinearmodel_MERGEDRRBSDATA.txt')
df = read.table('ALTAIONLY_COMPLEX_RRBSlinearmodel_MANYBASES_MERGEDRRBSDATA_ALLTISSUES.txt')
df = df[df$V5!='AltaiNeanderthalnew',]
df$col='other'
df$col[df$V6=='Osteobl']='Osteobl'
ggplot(df,aes(V4,V2,col=col,group=V6))+geom_line()+facet_wrap(~V5,ncol=5)+labs(x='coverage cutoff', y='R-squared', title='RRBS datasites. Osteoblast vs other tissues')
ggplot(df,aes(V4,V3,col=col,group=V6))+geom_line()+facet_wrap(~V5,ncol=1, scales='free_y')+labs(x='coverage cutoff', y='Datapoints', title='RRBS datasites. Osteoblast vs other tissues')
ggplot(df[df$V6=='Osteobl',],aes(V4,V3,col=col,group=V6))+geom_line()+facet_wrap(~V5,ncol=1, scales='free_y')+labs(x='coverage cutoff', y='Datapoints', title='RRBS datasites. Osteoblast vs other tissues')

df$size = 1
df$size[df$V6=='Osteobl']=1.5
ggplot(df,aes(V4,V2,col=col,group=V6,size=as.factor(size)))+geom_line()+facet_wrap(~V5,ncol=5)+labs(x='coverage cutoff', y='R-squared', title='RRBS datasites. Osteoblast vs other tissues')
ggplot(df,aes(V4,V2,col=col,group=V6,))+geom_line(aes(size=size)+facet_wrap(~V5,ncol=5)+labs(x='coverage cutoff', y='R-squared', title='RRBS datasites. Osteoblast vs other tissues')


$$ this is for 450kmethyl
df$col[df$V6=='GSM1179543']='Hair_PT1'
df$col[df$V6=='GSM1179544']='Hair_PT2'
df$col[df$V6=='GSM1179545']='Hair_PT3'
df$col[df$V6=='GSM1179546']='Hair_PT4'
df$col[df$V6=='GSM1179547']='Hair_PT5'


func <- function(sample, tissue='Osteobl'){
m <- subset(df, grepl(sample,V5))
m$col='other'
m$col[m$V6==tissue]=tissue
pdf(sprintf('%s.pdf',sample))
print(ggplot(m,aes(V4,V2,col=col,group=V6))+geom_line());dev.off()
}

require(ggplot2)
require(reshape2)

df = read.table('BIGDF_RRBSlinearmodel_MERGEDRRBSDATA.txt')
m <- subset(df, V6=='Osteobl')
ggplot(m,aes(V4,V2,col=V5))+geom_line()
m <- subset(df, grepl('Altai',V5))
m$col='grey'
m$col[m$V6=='Osteobl']='blue'
ggplot(m,aes(V4,V2,col=col,group=V6))+geom_line()

m <- subset(df, grepl('Deni',V5))
m$col='grey'
m$col[m$V6=='Osteobl']='blue'
ggplot(m,aes(V4,V2,col=col,group=V6))+geom_line()
m <- subset(df, grepl('Saqqaq',V5))
m$col='grey'
m$col[m$V6=='Osteobl']='blue'
ggplot(m,aes(V4,V2,col=col,group=V6))+geom_line()



find ../ucscdownfiltered/ -iname '*_[1-2].bed'|xargs -l1 basename |grep '.bed' | cut -d '_' -f 1 | sort | uniq > filelist.txt

nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py dryrun mk_newmeth_450konly.yaml --max-threads 30 --destination methyl_rawdata/OUTPUTNEW --temp-root methyl_rawdata/TEMPNEW

nice -n 19 Rscript makelinearmodelRRBS_withvariance.R ; echo 'R script on RRBS is done on Kraken'| mail -s "jobs done" kristianhanghoej@gmail.com

files=`find /home/krishang/data/methylation/RRBS/ucscdownload -iname '*.bed'`
for f in $files;
do
    echo $(basename $f)
    awk '{if($10>10)print $1"\t"$2"\t"$3"\t"$10"\t"$11;}' $f | sed 's/chr//' > $(basename $f)
done
## have to remove the 'chr' in  all files
##sed -i 's/chr//' *.bed


python mergeSSDS.py test.test `find ./AltaiNeanderthal??/ -iname '*HOXD10*'`
diff <(zless test.test) <(zless AltaiNeanderthal/AltaiNeanderthal_MethylMap_HOXD10.txt.gz )


##############
 cat <(cut -f 1,2 U87_1.bed ) <(cut -f 1,2 Osteobl_1.bed) | sort -k 1,1n -k 2,2n  -u > newfile_new.txt
##############


cat <(cut -f 1,2 U87_1.bed ) <(cut -f 1,2 Osteobl_1.bed) | sort -k 1,1n -k 2,2n -k 3,3n | sort -u > newfile_new.txt 

cat <(cut -f 1,2 U87_1.bed ) <(cut -f 1,2 Osteobl_1.bed) | sort -k 1,1n -k 2,2n > newfile.txt 
cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1n -k 2,2n > newfile.final.txt


cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1 -k 2,2n -k 3,3n | gzip  > newfile.final.txt
cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1 -k 2,2n -k 3,3n > newfile.final.txt

uniq -u newfilesort.txt > newfilesortuniq.txt

cat <(cut -f 1,2 LOSCHDS) <(cut -f 1,2 LOSCHSS) | sort -k 1,1 -k 2,2n -k 3,3n > newfile.txt 
cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1 -k 2,2n -k 3,3n | gzip  > newfile.final.txt

Panislets_2.bed


cat <(cut -f 1,2 newfile.final.txt ) <(cut -f 1,2 Panislets_2.bed) | sort -k 1,1 -k 2,2n -k 3,3n > newfile.txt 
cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1 -k 2,2n -k 3,3n > newfile.final.2.txt


## finding all RRBS positions:
cat <(cut -f 1,2 Osteobl_2.bed ) <(cut -f 1,2 Osteobl_1.bed) | sort -k 1,1 -k 2,2n -k 3,3n > newfileost.txt 
cat <(uniq -d newfile.txt) <(uniq -u newfile.txt) | sort -k 1,1 -k 2,2n -k 3,3n > newfile.finalost.txt
sed -i 's/chr//g' newfile.finalost.txt

sort -k 1,1n -k 2,2n -k3,3n  newfile.finalost.txt >rrbscoordinates # it is important to remove ;chr; to be able to sort numerically 1->22
# chr can be added later on if needed.

head -n -3 newfile.finalost.txt > rrbscoordinates
sed -i '/^X/ d' rrbscoordinates
sed -i '/^Y/ d' rrbscoordinates 
sed -i '/^MT/ d' rrbscoordinates
sed -i '/^M/ d' RRBScoordinates_autosom_wochr.bed
awk '{print $1"\t"$2-750"\t"$2+750 }' rrbscoordinates > ~/data/bedfiles/RRBScoordinates_autosom_wochr.bed

sed '/^X\|^Y\|^M d'
/disk/ginzburg/data/krishang/methyl_rawdata/runbedcoorddat.sh /disk/ginzburg/data/krishang/methyl_rawdata/OUTPUT/
zless LoschbourSS/LoschbourSS_MethylMap_methyl450k2000.txt.gz | sort -k 1,1n -k 2,2n -k3,3n > LOSCHSS
zless LoschbourDS/LoschbourDS_MethylMap_methyl450k2000.txt.gz | sort -k 1,1n -k 2,2n -k3,3n > LOSCHDS

python ~/data/nucleosomes/laziridis/methyltestscipt_new.py ~/data/nucleosomes/laziridis/LBK.hg19_1000g.bam weird jlkhlhjkhlj > outputDF.txt
python ~/data/nucleosomes/laziridis/methyltestscipt_new.py ~/data/nucleosomes/laziridis/LBK.hg19_1000g.bam > outputDF.txt

nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py run methylCTCFmanybases.yaml --max-threads 30 --destination CTCFNEWSCRIPTMANYOUTPUT --temp-root CTCFNEWSCRIPTMANYTEMP
nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py run methylCTCF.yaml --max-threads 30 --destination CTCFNEWSCRIPTOUTPUT --temp-root CTCFNEWSCRIPTTEMP


SS=read.table('forplotting.txt')
DS=read.table('forplotting_DS.txt')
tit='Denisova'
tit='Neanderthal'
require(ggplot2)
SS$lib = 'SS'
DS$lib = 'DS'
df = rbind(SS,DS)
df = cbind(df,do.call(rbind,strsplit(as.character(df$V3),'_')))
names(df) = c('di','count', 'V3', 'lib','direction','prime')
ggplot(df,aes(di,count,col=direction, shape=prime))+geom_point()+facet_wrap(~lib,ncol=1)+theme(legend.position='bottom')+labs(title=tit)

SL3003 SL3004  DS Deni
B1087 B1088 B1101 B1102 B1107 B1108 B1109 B1110 B1128 B1130 B1133 SS Deni


python methyltestscipt_new.py AltaiNea_chrom22snip.bam L9105 > forplotting.txt
python methyltestscipt_new.py AltaiNea_chrom22snip.bam L9198 L9199 L9302 L9303 > forplotting_DS.txt

paste <(ls *bam|sort) <(ls ../*bam | grep -v 1000g | sort)
zip -v fragmentplots.zip `find . -iname 'Fragmisincorporation_plot.pdf'`

samtools view -h -b Loschbour.hg19_1000g.bam.1 -r 'Loschbour'> Loschbour.hg19_1000g.SSonly.bam.1

a=read.table('forR')
table(a$V1[with(a,V4=='False' & V2=='Rightpart')])

  CA   CG   CT   TC   TG
 746 3167    7    0   96
table(a$V1[with(a,V4=='False' & V2=='Leftpart')])

  CA   CG   CT   TC   TG
  33 3655    9    1 1119
table(a$V1[with(a,V4=='True' & V2=='Leftpart')])

  CA   CG   CT   TC   TG
 100 3239   11    2  762
table(a$V1[with(a,V4=='True' & V2=='Rightpart')])

  CA   CG   CT   TC   TG
1098 3582    6    1   22
table(a$V1)

# simple string pattern matching awk
awk '{if($2 ~ /Rightpart/) {d+=1}} END {print d,NR}' testdata

# removes the first line i.e. a header.
sed '1d' linux_file.txt
## add header
 zless LSS.gz| sed -e '1i\HeaderGoesHere' | gzip  > LSSheader.gz

python findallcpgoccurences.py | gzip - > new.txt.gz

for f in `find . -iname 'Gm*'`; do echo $f; awk '{s+=$4} END {print s/NR}' ${f} ; done

# check number of CpG sites in genome
zless allCpG_genome.bed.gz |awk '{if($1==2 && $2>176979512 && $2<176999000){print}}'>howmany.txt

krishang@franklin:~/data/methyl_rawdata$ nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py run hoxd10.yaml --max-threads 10 --destination HOXD104basesOUTPUT --temp-root HOXD104basesTEMP

df=data.frame(1,seq(0,249998000,2000),seq(2000,250000000,2000))
nice -n 19 python ~/install/epipipe/epipaleomix/tools/methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxforw.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa  --SkipFivePrime 1 --ReadBases 3 --Primes five --LibraryConstruction SS
nice -n 19 python methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxforw.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa --ReadBases 2 --Primes both --LibraryConstruction SS

# a one line.
wget -O - http://www.nature.com/nature/journal/vaop/ncurrent/full/nature14558.html | grep nature14558.pdf
# then download the /nature/.../nature14558.pdf
wget www.nature.com/nature/.../nature14558.pdf
## OR
wget www.nature.com/nature/journal/vaop/ncurrent/pdf/nature14558.pdf


wget -O - http://www.nature.com/nature/journal/vaop/ncurrent/full/nature14558.html | grep nature14558.pdf
# download from server ginzburg
## first get the htmlfile
wget http://www.nature.com/nature/journal/vaop/ncurrent/full/nature14558.html
###grep pdf based on website name
grep nature14558.pdf nature14558.html
## then download link to pdf
wget www.nature.com/nature/journal/vaop/ncurrent/pdf/nature14558.pdf
## ulalal

echo 'deaminatedsites, totcovwithin, meanrate,totalinsidesites,totaloutsidecov, totalnumberofsites'; zless AltaiNeanderthalmean004_MethylMap_RRBSk1500_bedcoord.txt.gz| sed '1d'|awk '{if($4>0) {d+=$4;t+=$5;obs+=1} else {withoutdea+=$5}} END {print d,t,d/t,obs,withoutdea,NR}'


#python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa4_skip1.txt.gz --ReadBases 4 --SkipFivePrime 1 &
#python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa4.txt.gz --ReadBases 4 &
#python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa6.txt.gz --ReadBases 6 &
#python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa.txt.gz &

#wait
##touch $1
fout=$1
echo 'Sample    A       C       G       T       NOCPGs' > $fout
zless gtoa.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print "2bases""\t"s1"\t"s2"\t"s3"\t"s4"\t"NR}'  >> $fout
zless gtoa4.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print "4bases""\t"s1"\t"s2"\t"s3"\t"s4"\t"NR}'  >> $fout
zless gtoa4_skip1.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print "4bases1skip""\t"s1"\t"s2"\t"s3"\t"s4"\t"NR}' >> $fout
zless gtoa6.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print "6bases""\t"s1"\t"s2"\t"s3"\t"s4"\t"NR}'  >> $fout

## chrom22
python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam chrome22.bed chrom22_testseqerror_saqqaq.txt.gz

## chrom1:
python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed testseqerror_saqqaq.txt.gz

## get seq error:
echo -e 'A\tC\tG\tT\tNOCPGs'; zless testseqerror_saqqaq.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print s1"\t"s2"\t"s3"\t"s4"\t"NR}'

the R:
mean(c(708,495))*3/ (639816-(27566-mean(c(708,495))))
NO.CpG's = sum(A,T,G,C)
NO.T's = T
meanoferrors = mean(c(A,G))
totalerrors = meanoferrors*3
totalerrors/(NO.CpG's-(NO.T's-meanoferrors))

probability of a T is actually a T. i.e. not a sequencing error
(1-mean(c(A,G))/T's)

nice -n 19 python ~/install/epipipe/epipaleomix/tools/methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxforw.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa  --SkipFivePrime 1 --ReadBases 3 --Primes five --LibraryConstruction SS
nice -n 19 python ~/install/epipipe/epipaleomix/tools/methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxrev.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa  --SkipThreePrime 1 --ReadBases 3 --Primes three --LibraryConstruction SS
nice -n 19 python ~/install/epipipe/epipaleomix/tools/methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxboth.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa  --SkipThreePrime 1 --SkipFivePrime 1 --ReadBases 3 --Primes both --LibraryConstruction SS

zless hoxboth.txt.gz |awk '{d+=$3;t+=$4}END {print d,t,NR}'
zless hoxforw.txt.gz |awk '{d+=$3;t+=$4}END {print d,t,NR}'
zless hoxrev.txt.gz |awk '{d+=$3;t+=$4}END {print d,t,NR}'
nice -n 19 python ~/install/epipipe/epipaleomix/tools/methylmap.py AltaiNea_hg19_1000g_entire.bam ../../bedfiles/hoxd10_wochr.bed hoxbothfirstwo.txt.gz --FastaPath ~/data/reference_human/hs.build37.1.fa --ReadBases 2 --Primes both --LibraryConstruction SS
zless hoxbothfirstwo.txt.gz |awk '{d+=$3;t+=$4}END {print d,t,NR}'

## this is goode for bedvoordfiles
echo 'deaminatedsites, totcovwithin, totalinsidesites,totaloutsidecov, totalnumberofsites'; zless Saqqaq_MethylMap_methyl450k2000_bedcoord.txt.gz| sed '1d'|awk '{if($4>0) {d+=$4;t+=$5;obs+=1} else {withoutdea+=$5}} END {print d,t,obs,withoutdea,NR}'

## in saqqaq
krishang@ginzburg:~/data/nucleosomes/saqqaq$ zless formermodel.txt.gz| awk '{if($3>0) {d+=$3;t+=$4;obs+=1;dearates+=$3/$4}} END {print d,t,obs,dearates,NR}'

join <(awk '{print $1"_"$2}' ../450ksnpmethylationdata/HumanMethylation450.txt| sort) <(awk '{print $1"_"$2}' ucscdownfiltered/Panc1Uw_1.bed | sort ) | wc -l

awk '{print $1"_"$2}' ../450ksnpmethylationdata/HumanMethylation450.txt| sort - >450kcoord
awk '{print $1"_"$2}' Panc1Uw_1.bed | sort - > pancreacoord


python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa.txt.gz
zless gtoa.txt.gz |head -n 1 ;zless gtoa.txt.gz | awk '{s1+=$3; s2+=$4; s3+=$5; s4+=$6} END {print s1,s2,s3,s4,NR}'
## NR IS NUMBER OF ROWS

python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa4_skip1.txt.gz --ReadBases 4 --SkipFivePr
ime 1
python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa4.txt.gz --ReadBases 4
python findNpNappearance.py ~/data/reference_human/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam test.bed gtoa6.txt.gz --ReadBases 6

for l in `find /home/cristina/data/ExtractionTest/6M_alignment_q25_unmapEx_dupRem/MAPDAMAGE/ -iname '*.bam'` ;do ln -s $l; done

bone = read.table('Osteobl_comb_wochr.bed')
neander = read.table('AltaiNeanderthal_MethylMap_RRBSk1500_bedcoord.txt.gz')
neander$region <- with(neander, sprintf('%s_%s', V1,V2+750))
bone$region <- with(bone, sprintf('%s_%s', V1,V2))
mdf = merge(neander, bone, by='region',suffixes=c('neander','bone'))
lm(V6neander~V5bone,data=mdf)
summary(lm(V6neander~V5bone,data=mdf))$r.squared
summary(lm(V6neander~V5bone,data=mdf[mdf$V5neander>40,]))$r.squared


# two different results:
sort -k 1 -k 2n -k 3n Bcbrainh11058n_comb_wochr.bed |head
sort -k 1,1 -k 2,2n -k 3,3n Bcbrainh11058n_comb_wochr.bed >tmp.bed

awk '{print $1"\t"$2-750"\t"$3+750 }' allcoordinatescpgchecked_final.bed > RRBScoordinates.bed

grep -R 'bed.gz' files.txt | cut -f 1 | sed 's/files.txt://g' > tissuetypesRRBS1.txt
grep -R 'bed.gz' files.txt | cut -f 1 | sed 's/:/\t/g'| cut -f 2 > tissuetypesRRBS.txt

cut -f 5 Osteobl_1.bed | sort | uniq -c | sort -k 2n  # the coverage at each site in terms of read count (range from 1 to 1000, note: capped at 1000)
cut -f 11 Osteobl_1.bed | sort | uniq -c | sort -k 2n  # column 11 is the methylated reads / total reads (range 0 - 100)

awk '{if ($5 > 10){d+=1} else{c+=1}}END{print d"\t"c}' Osteobl_1.bed

# selecting nucleosomes:
zless saqqaq_NucleoMap_CTCF.txt.gz | awk '{if ($5 > 200 && $3-$2<1) print}' > nucl.txt
awk '{print $1"\t"$2-73"\t"$3+73}' nucl.txt > topnuclforseq.txt
seqtk subseq ../../../reference_human/hs.build37.1.fa topnuclforseq.txt > nuclseqs.txt


a=read.table('crosscomparedata.txt',h=T)
b = a[a$datapoints>10000&grepl('complex|semicomplex',a$linearmodel),]
b = a[a$cov_cpg_cutoff=='10_10',]
b = a[grepl('10_10|20_20', a$cov_cpg_cutoff)&grepl('complex|semicomplex',a$linearmodel),]
b = a[grepl('Saqqaq',a$compared)&a$datapoints>1000&grepl('complex|semicomplex',a$linearmodel),]  # only saqqaq
ggplot(b,aes(x=compared, y=rsquared, shape=linearmodel,col=cov_cpg_cutoff, size=datapoints))+geom_point()+ theme(axis.text.x = element_text(angle = -90, hjust = 0,size=8), legend.position='bottom')
a=read.table('lmdata.txt', h=T, row.names=1)

onlyhair = grepl('Hair', rownames(a))
bigdf = as.data.frame(cbind(colMeans(a[onlyhair,]),do.call(rbind,strsplit(names(a),'\\.'))))
bigdf$V1 = as.numeric(as.character(bigdf$V1))
bigdf$nam = with(bigdf, sprintf('%s_%s_%s_%s',V2,V3,V4,V5))
ggplot(bigdf,aes(nam, V1, col=V6))+geom_point() + 
	theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5,size=8), legend.position='bottom') +
	labs(y='corrected R-squared', x='NO bases; CpG bedrange; minimum read cov; minimum CpG count');dev.off()


splitdf = split(bigdf, bigdf[,3])
df = splitdf[['1500']]
df$V1 = as.numeric(as.character(df$V1))
df$nam=with(df, sprintf('%s_%s_%s',V2,V4,V5))
ggplot(df,aes(nam, as.numeric(as.character(V1)), group=V6, col=V6))+geom_point()+ theme(axis.text.x = element_text(angle = -90, hjust = 0,size=8));dev.off()

diff <(cut -f 2 gcold) <(cut -f 2 gcnew)


nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py dryrun GAMBAetalMajormakfile.yaml --max-threads 10 --destination GAMBAetalOUTPUT --temp-root GAMBAetalTEMP &

files=list.files(pattern='5pCtoT_freq.txt', recursive=T)
dfs = lapply(files,read.table, h=T)
names(dfs) = sapply(strsplit(files,'/'), '[[', 1)
func <- function(x){
	df <- as.data.frame(dfs[[x]])
	df[1,2]
}	
t = c('CDM4','11850','NB14')

plotdata5prime = data.frame(n = names(dfs), data=unlist(lapply(names(dfs),func)))

dataCDM4five = plotdata5prime[grepl(t[1], names(dfs)),]
data11850five = plotdata5prime[grepl(t[2], names(dfs)),]
dataNB14five = plotdata5prime[grepl(t[3], names(dfs)),]

makenames <- function(x, columns){
temp =unlist(strsplit(as.character(x),'_'))
paste(temp[columns],collapse='_')
}
dataCDM4five$nnames = unlist(lapply(dataCDM4five[,1],makenames, columns=c(4,5,6)))
dataCDM4five$rls = unlist(lapply(dataCDM4five[,1],makenames, columns=c(10,11)))



require(ggplot2)
pdf('CDM4five.pdf')
ggplot(dataCDM4five, aes(nnames, data, color=rls)) + geom_point()+
    #theme(legend.position='none',
    theme(
      axis.text = element_text(size=8),
      axis.text.x = element_text(angle = -90,
      vjust=0.5,hjust=0))+ coord_flip()
dev.off()


files<-list.files(pattern='OUT_')
dfs = lapply(files,read.table)
names(dfs) = sapply(strsplit(files,'_'), '[[', 2)

func <- function(n, dfs){
df = as.data.frame(dfs[[n]])
if(dim(df)[1]>60){return(data.frame(n,df$V2, df$V5))}
}
l = lapply(names(dfs),func, dfs=dfs)
bigdf <- l[!sapply(l, is.null)]

allinone = do.call(rbind, l)
allinone = do.call(cbind, bigdf)
cor(allinone[,c(3,6,9,12)])
summary(lm(allinone[,3]~allinone[,12]))


find . -iname '*Conserved*' | grep Nucleo | zip --names-stdin test.zip



nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py dryrun RISEmajormakefile.yaml --max-threads 30 --destination RISESAMPLEOUTPUT --temp-root RISESAMPLETEMP
nice -n 19 ~/install/epipipe/epipaleomix/epaleomix.py dryrun methylCTCF.yaml --max-threads 30 --destination CTCFNEWSCRIPTOUTPUT --temp-root CTCFNEWSCRIPTTEMP

# how to retrieve coordinates from ucsc
https://www.biostars.org/p/94292/#94300


# split gcskewed bedfiles into three groups and overlap them with tss of hole genome: ~/data/nucleosomes/bedfiles
a=read.table('cpgislandsEXT_UCSC_Browser_HG19.bed.gz')
chromosomes = c(paste0('chr',1:22),'chrX')
table(keep <- a$V2 %in% chromosomes)
a=a[keep,]
quants <- quantile(a$V12,probs=seq(0.33,1,0.33))
# 12 column is the obs/exp ratio
lowestthird = a[quants[1]>=a$V12,]
topthird = a[quants[2]<=a$V12,]
rest = rownames(a) %in% c(rownames(lowestthird),rownames(topthird))
midthird = a[!rest,]
lowestthird$V1 = NULL
midthird$V1 = NULL
topthird$V1 = NULL
write.table(lowestthird, file='CpGIsl_lowestthird_wchr.bed',row.names=F,col.names=F,quote=F,sep='\t')
write.table(midthird, file='CpGIsl_midthird_wchr.bed',row.names=F,col.names=F,quote=F,sep='\t')
write.table(topthird, file='CpGIsl_topthird_wchr.bed',row.names=F,col.names=F,quote=F,sep='\t')
lowestthird$V2 = sapply(strsplit(as.character(lowestthird$V2),'chr'),'[[',2)
midthird$V2 = sapply(strsplit(as.character(midthird$V2),'chr'),'[[',2)
topthird$V2 = sapply(strsplit(as.character(topthird$V2),'chr'),'[[',2)
write.table(lowestthird, file='CpGIsl_lowestthird_wochr.bed',row.names=F,col.names=F,quote=F,sep='\t')
write.table(midthird, file='CpGIsl_midthird_wochr.bed',row.names=F,col.names=F,quote=F,sep='\t')
write.table(topthird, file='CpGIsl_topthird_wochr.bed',row.names=F,col.names=F,quote=F,sep='\t')
dim(lowestthird);dim(midthird);dim(topthird)
mean(lowestthird$V12);mean(midthird$V12);mean(topthird$V12)
 
for file in *_rl_*.bam; do echo "nice -n 19 mapDamage -i ${file} -r /home/cristina/data/References/Horse/Equus_cab_nucl_wChrUn.fasta –burn=25000 –iter=100000"; done | parallel -j 20
4

I lot of trash..... see mapDonsupsample.sh for the extensive analysis.
##for file in `find ../ -iname '*bam' | grep -v 1000g`; do echo "nice -n 19 samtools index ${file}" ; done | parallel -j 20
##for file in `find ../ -iname '*bam' | grep -v 1000g`; do echo "nice -n 19 samtools view -h -b ${file} '1' '2' '3' '4' '5' '6' '7' '8' > subsample_${file##*/}" ; done | parallel -j 20
##for file in `find ../ -iname '*bam' | grep -v 1000g`; do echo "x=`samtools view -c ${file}`; prop=`python -c "1000000.0/$x"`; echo $file; echo $prop" ; done | parallel -j 20
##parallel -j 20 "x=`samtools -c {}`" ::: `find ../ -iname '*bam' | grep -v 1000g`
##for file in `find ../ -iname '*bam' | grep -v 1000g`; do echo "x=`samtools -c ${file}`; prop=`python -c "print 1000000.0/$x"`;nice -n 19  samtools view -h -b ${file} '1' '2' '3' '4' '5' '6' '7' '8' > subsample_${file##*/}" ; done | parallel -j 20
##for file in `find . -iname '*bam' | grep -v 1000g`; do echo "nice -n 19 mapDamage -n 100000 -i ${file} -r /home/krishang/data/reference_human/hs.build37.1.fa –burn=25000 –iter=100000"; done | parallel -j 20 &




files=`find /home/cristina/data/ExtractionTest/6M_alignment_q25_unmapEx_dupRem/MAPDAMAGE/*.bam | grep _user_ | grep -v Horse_mt`
for file in $files; do ln -s $file; done
for f in $files; 
do
    bname=`basename $f`
    tokens=(${bname//\./ })
    outfile=${tokens[0]}
    python bamtosubbamfiles.py $f 35 100
done


a=read.table('BAM1_NucleoMap_CTCF_gc.txt.gz')
vec = c()
hits = dim(a)[1] -1
for (idx in 1:hits){vec = c(vec,abs(a[idx,2]-a[(idx+1),2]))}
vec_short = vec[vec<2000]
require(ggplot2)
df= data.frame(y=vec_short)
ggplot(df,aes(y))+geom_histogram(binwidth=2)+coord_cartesian(xlim=c(0,500))


a=read.csv('GPL13534_HumanMethylation450_15017482_v.1.1.csv.gz',skip=7,h=T)
df=data.frame(chr=a$CHR, genpos=a$MAPINFO, strand=a$Strand, ID=a$IlmnID)
# remember to move the all the sites without a ID. 
write.table(df, file='HumanMethylation450.txt',row.names=F,col.names=F,quote=F,sep='\t')

load('GSE48472_metdata.Rdata')
conv = read.table('../HumanMethylation450.txt')
conv = conv[order(conv$V4),]
table(keep <- metdata$ID_REF%in%conv$V4)
metdata=metdata[keep,]
table(keep1 <- conv$V4%in%metdata$ID_REF)

metdata$chr = conv$V1
metdata$genomicpos = conv$V2
metdata$strand = conv$V3
save(metdata,file='complete450kdatasetwithcoord.Rdata')
ord = order(metdata$chr, metdata$genomicpos)
metdata = metdata[ord,]
save(metdata,file='complete450kdatasetwithcoord_sorted.Rdata')


ancient = read.table('chunksofmethylnewnew.txt')
modern = read.table('newRRBSCHUNKS1.txt')
modernc = read.table('newRRBSCHUNKS1_C.txt')
modern = modern[modern$V1=='chr1',]
modernc = modernc[modernc$V1=='chr1',]
modernc$V7 = sprintf('%s_%s_%s',modernc$V1,modernc$V2,modernc$V3)
modern$V7 = sprintf('%s_%s_%s',modern$V1,modern$V2,modern$V3)
modernmerged = merge(modern,modernc,by='V7', all=T)[,c(1,7,13)]
dat = apply(modernmerged[,c(2,3)],1, function(x) mean(x,na.rm=T))
modern = data.frame('V7' = modernmerged[,1], 'V6'=dat)

forsorting = data.frame(do.call(rbind,strsplit(modernmerged$V7,'_')))
modern = modern[order(as.character(forsorting[,1]),as.numeric(as.character(forsorting[,2]))),]


#ancient$V7 = sprintf('%s_%s_%s',ancient$V1,ancient$V2,ancient$V3)
ancient$V7 = sprintf('chr%s_%s_%s',ancient$V1,ancient$V2,ancient$V3)
peak = mean(ancient$V6)+sd(ancient$V6)
seq(0,peak,peak/10)
##bin ancient
bins = c(seq(0,peak,peak/10),1)
ancienttest = ancient
for (idx in 1:(length(bins)-1)){
good = ancient$V6>=bins[idx] & ancient$V6<=bins[idx+1]
ancienttest$V6[good] = idx-1
}
ancienttest = ancienttest[(ancient$V7 %in% modern$V7),]
modern = modern[modern$V7 %in% ancienttest$V7,]
## bin modern
bins = seq(0,100,10)
moderntest = modern
for (idx in 1:(length(bins)-1)){
good = modern$V6>=bins[idx] & modern$V6<=bins[idx+1]
moderntest$V6[good] = idx-1
}

library(Hmisc)
rcorr(modern$V6, ancienttest$V6, type="pearson")

# adds 'chr' to the first line chromsomoeschrchrchr:
awk '{print "chr" $0;}' CTCF_human_2kb_rmoverlap_wochr.bed > CTCF_human_2kb_rmoverlap_wchr.bed
# removes 'chr' from the bed file:
sed -i 's/chr//g' CTCF_human_2kb_rmoverlap_wchr.bed

awk '{print "chr" $0;}' gcskewedpromotorregion_HG19_bothstrand_ginnoetal_wochr.bed > gcskewedpromotorregion_HG19_bothstrand_ginnoetal_wchr.bed

#looking for present-day methylation patterns
https://www.encodeproject.org/search/?searchTerm=GSE27584
# downloaded two bigbed files from 
https://www.encodeproject.org/experiments/ENCSR000DEH/
ENCFF000LWB and ENCFF000LWC # two replicates of the same data

bigbed format is explained here:
http://genome.ucsc.edu/goldenPath/help/bigBed.html
chmod +x bigBedToBed
./bigBedToBed ENCFF000LWB.bedMethyl.bigBed ENCFF000LWB.bedMethyl.Bed

https://www.encodeproject.org/documents/3fdcc16e-3cb2-4514-b81b-f7f2c7ef28e2/@@download/attachment/wgEncodeHaibMethylRrbs.release3.html.pdf

ancientkeep = ancient[ancient$V3<7 & (ancient$V3/ancient$V4!=1),]  # this remove what could be true SNPS AND NOT METHTLAIONT SIGN
# this removes potential snps that has nothing to do with overhangs. IT is working really well. COOL


ancient = read.table('chunksofmethylnew1.txt')
modern = read.table('RRBSdatachunks.txt')
modern = modern[modern$V1=='chr1',]
ancient = ancient[(ancient$V2 %in% modern$V2),]
modern = modern[modern$V2 %in% ancient$V2,]
library(Hmisc)
rcorr(modern$V6, ancient$V6, type="pearson")
# linear correlation


seqs = seq(10469, 249239887, 20000)
for (idx in 1:length(seqs)-1){
start = seqs[idx]
end = seqs[idx+1]
dat = ancientkeep[ancientkeep$V2>=start & ancientkeep$V2<end,]
print(sum(dat$V3)+1)
print(sum(dat$V4)+1)
print('\n')
}

vec = c()
seqs = seq(6606026, 6687901, 5000)
mids = seqs[1:length(seqs)-1]+2500

for (idx in 1:(length(seqs)-1)){
vec = c(vec,(sum(nucleokeep$V2>seqs[idx]&nucleokeep$V2<seqs[idx+1])))
}
nucleo = data.frame(mids,vec)


(cut -f 1,2,3  testhg19ctcf.bed)| diff - <(cut -f 1,2,3 hmm.bed )


cpg = read.table('gokcpgs.txt.gz')
nucleo =read.table('gokcpgsnucleo.txt.gz')
require(ggplot2)
require(zoo)
#df_plot = data.frame('x'=a[,2],'y'= rollmean(a[,3], 100,fill='extend')/rollmean(a[,4],100,fill='extend'))
df_plot = data.frame('x'=rollmean(cpg[,2],100),'y'= rollmean(cpg[,3], 100)/rollmean(cpg[,4],100))
ggplot(df_plot,aes(x,y))+geom_line()
ggplot(df_plot,aes(x,y))+geom_line()+geom_point(data=nucleo[nucleo$V5>2,],  aes(V2,0))

python methylmap.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/CTCFsites_2KB_overlap_rm.bed here.methyl.5prime.txt.gz --FastaPath ../reference/hs.build37.1.fa --FastaChromType False --BamChromType False --ReadBases 6 --LibraryConstruction DS --Primes 5

ssh-copy-id -i ~/.ssh/id_rsa.pub -p 24222 krishang@newton.dna.ku.dk

samtools flagstat
nohup nice -n 19 java -jar /home/krishang/install/picard-tools-1.97/MarkDuplicates.jar I=../split_RG/B5347.bam  O=B5347_true_bool_jar.bam M=trashtrash.txt REMOVE_DUPLICATES=true &
nohup nice -n 19 python ~/install/python_scripts/rmdup_collapsed.py ../split_RG/B5347.bam --remove-duplicates > B5347_rmdup_new_franklin_2nd.bam &


bedtools getfasta -bed human_shared_CTCF.bed -fi ../reference/hs.build37.1.fa -fo human_shared_CTCF.fasta

awk -F$'\t' '{if ($NF > 0.9){print}}' <chrom22_51_50.40000-20000.mappability | cut -f 1,2,3 |sed 's/^/chr/'  > chrommappa.txt
awk -F$'\t' '{if ($NF > 0.9){print}}' <chrom22_51_50.40000-20000.mappability |sed 's/^/chr/'  > chrommappa.txt
awk -F$'\t' '{if ($NF > 0.9){print}}' <chrom22_51_50.40000-20000.mappability |sed 's/^/chr/' | bedtools intersect -wa -u -a bedfile -b "stdin"
bedtools intersect -wa -u -a bedbed.bed -b chrommappa.txt

put this in ~/bash_profile and source. that's it.
PYTHONPATH="/Users/kristianhanghoj/research/projects/:PYTHONPATH"
export PYTHONPATH

zcat  here.txt.methyl.gz | cut -f 3 | awk '{s+=$1} END {print s}'


crontab -e
min hour day week year /your/command.sh

## create exon/intron splice sites bed coordinates
a=read.table('forsplicesites')
b=a[a$V2=='+',]
startsites = b$V7
startsites = as.numeric(unlist(strsplit(as.character(startsites),',')))
# remove duplicates:
startsites = startsites[!duplicated(startsites)]
startsites = sort(startsites)
df = data.frame('chrom'=1, 'start'=startsites-50, 'end'=startsites+50)
write.table(df, file='~/Desktop/splicesiteschrom1.bed',row.names=F,col.names=F,quote=F,sep='\t')

#### A BETTER WAY:
UCSC:knowngene:BED-browser extensible data: chrom1
get_output: introns plus 0 bases at each end: Get Bed

intron = read.table('/Users/kehanghoej/Downloads/splicesitesfromintrons')
intron_plus = intron[intron$V6=='+',]
chroms = paste0('chr',1:22)
table(keep <-intron_plus$V1 %in% chroms)
intron_plus = intron_plus[keep,]
df = data.frame('chrom'=intron_plus$V1, 'start'=intron_plus$V2-100, 'end'=intron_plus$V2+100)
write.table(df, file='~/Desktop/splicesites_genome.bed',row.names=F,col.names=F,quote=F,sep='\t')


## coverage (fast and dirty)
samtools view test.bam | awk  '{print $6}' | egrep -o '[0-9]+M' | sed 's/M//g' | awk '{ sum+=$1} END {print sum}'

###coverage (juan's)
java -Xmx20g -jar depth-cover.jar /HGwd/cristina_nuDNA_both_runs/final_bam_file_1st_2nd/8.4_1st_2nd_merged_cutadapt_raw_F4_sort_rmdup_IR_30bp.bam -o 8.4_1st_2nd_merged_cutadapt_raw_F4_sort_rmdup_IR_30bp_coverage.csv


grep -RnisI multiprocessing * --color=auto
nohup samtools-1.1 view -s 0.6615 -h -b Onlyreads.rmdup.normal.bam > Onlyreads.rmdup.normal.DsToSaq.bam &

python -m cProfile -o testofprofile simulate.py  chrome.fa small.fastq  small.fastq prefixsimu
/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/runsnake testofprofile

bam_pipeline dry-run 000_makefile.yaml --jar-root=/home/krishang/bin/jar_root/
bam_pipeline run 000_makefile.yaml --jar-root=/home/krishang/bin/jar_root/ --bwa-max-threads=10

samtools view  -h -b  ../saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam 22:20,000,000-22,000,000 > chrom22_snip.bam
## creates fastq files from bam files. this is needed for simulating reads for the false discovery rate (FDR)

java -jar ~/install/picard-tools-1.119/SamToFastq.jar I=chrom22_snip.bam F=chrom22_snip.fastq

pbpaste > test.txt

find CTCF_TSS_bedfiles -iname 'methylbed_testhg19ctcf*' | xargs cp -t ctcfs_new/

Rscript  ~/Dropbox/plot_scripts/plot_combinednucleomapmethyl.R ./ bed ./ test_all1234.pdf 25 2000
Rscript  ~/Dropbox/plot_scripts/plot_combinednucleomapmethyl.R ./ bed ./ test_all1234.pdf 50 4000

 Rscript ~/Dropbox/plot_scripts/plot_methylcopy.R ./ methylationmap ./ hmm.pdf F 2000
 Rscript ~/Dropbox/plot_scripts/plot_nucleomap_bedfilecopy.R  ./ nucleomap ./ hmm.pdf 25 2000


Rscript ~/Dropbox/plot_scripts/plot_methylcopy.R ./ methylbed_LO4KH.8libs.Kostenski_K14.Homo_sapiens_hg19.realigned_sorted.txt ./ hmm.pdf F 2000

#small nucleomap windows
Rscript ~/Dropbox/plot_scripts/plot_methylcopy.R ./ nucleomap_methyl_cutoff ./ methyl_map1234577.pdf T 300

Rscript ~/install/python_scripts/makecutoff.R ../OUTPUT_Saqqaq.hg19.flt.sort.rmdup.realign.md/nucleomap_reads_Saqqaq.hg19.flt.sort.rmdup.realign.md.txt nucleomapcutoff00.txt 0

nohup nice -n 19 python ~/install/python_scripts/methylX_bases.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam nucleomapcutoff00.txt --out nucleomap_methyl_cutoff00.txt
nohup nice -n 19 python ~/install/python_scripts/basecomposition.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam nucleomap_0w.txt --out nucleomap_basecom_cutoff0000.txt &

#nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/TSSgenome_200bp_plussstrand.bed --out methyl_scoring_TSS_genome.txt &
#nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/random_500bp_plussstrand.bed --out methyl_scoring_Random_genome.txt &

nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/housekeeping_genes_plusstrand_200bp_TSS.bed --out methyl_scoring_TSS_housekeeping_genome.txt &

nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/CTCF_200bp.bed --out methyl_scoring_CTCF_genome.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/CpG_low.bed --out methyl_scoring_cpg_low.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/CpG_top45.bed --out methyl_scoring_cpg_top45.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/CpG_top80.bed --out methyl_scoring_cpg_top80.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/int_chrom1.bed --out methyl_scoring_intron_chrom1.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/cpgislandsentiregenome.bed --out methyl_scoring_cpg_genome.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/exons_chrom1.bed --out methyl_scoring_exons_chrom1.txt &
nohup nice -n 19 python ~/install/python_scripts/methylX_scoring.py ../reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/mito.bed --out methyl_scoring_mito.txt &



nohup ./runbams_bed.sh bedfiles/housekeeping_genes_plusstrand_4kb_TSS.bed &
nohup ./runbams_bed.sh bedfiles/testhg19ctcf.bed &


nohup ../executescript_mammoth_w_chrom.sh -b AM.Nuclear_loxAfr4.realigned_phusion.bam -f ../Chromosomes.v2.fasta "chr1" > log_phusion.txt &
nohup ../executescript_mammoth_w_chrom.sh -b AM.Nuclear_loxAfr4.realigned_gold.bam -f ../Chromosomes.v2.fasta "chr1" > log_gold.txt &
nohup ../executescript_mammoth_w_chrom.sh -b AM.Nuclear_loxAfr4.realigned_accuprime.bam -f ../Chromosomes.v2.fasta "chr1" > log_accuprime.txt &


nohup nice -n 19 python ~/install/python_scripts/nucleomap_reads_bedinput.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/housekeeping_genes_minusstrand_4kb_TSS.bed --out nucleomap_housekeeping_TSS_4kb_onlychroms_minusstrands.txt

nohup  pythonscripts/executescript_server.sh -b taymir_peninsula_16_kyBP/CGG10023.Equus_cab_nucl_wChrUn.bam -f horse_ref/Equus_cab_nucl_wChrUn.fasta "chr1" > taymir_peninsula_16_kyBP/log.txt &
nohup pythonscripts/executescript_server.sh -b taymir_peninsula_43_kyBP/CGG10022.Equus_cab_nucl_wChrUn.bam -f horse_ref/Equus_cab_nucl_wChrUn.fasta "chr1" > taymir_peninsula_43_kyBP/log.txt &
nohup pythonscripts/executescript_server.sh -b yakutia_18th_cent/CGG10397.Equus_cab_nucl_wChrUn.bam -f horse_ref/Equus_cab_nucl_wChrUn.fasta "chr1" > yakutia_18th_cent/log.txt &
nohup pythonscripts/executescript_server.sh -b yakutia_4_kyBP/Batagai.Equus_cab_nucl_wChrUn.bam -f horse_ref/Equus_cab_nucl_wChrUn.fasta "chr1" > yakutia_4_kyBP/log.txt &

tail -n +4065 methyl_TSSGENOME_4KB.txt > result_filename.txt


~/install/python_scripts/methylX_bases_USER.py	

nohup nice -n 19 python ~/install/python_scripts/nucleomap_reads_bedinput.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/TSSgenome_4kb_plusstrand.bed --out new_TSS_4kb_onlychroms.txt &

nohup samtools sort LO4KH.8libs.Kostenski_K14.Homo_sapiens_hg19.realigned.bam LO4KH.8libs.Kostenski_K14.Homo_sapiens_hg19.realigned_sorted &

a=read.table('CpG_entirechrom.gz')
quantile(a[,5],seq(0,1,.10))
b = a[a[,5]>22.8,]
c=data.frame(b[,1],b[,2]-1000,b[,2]+1000)
chroms = paste0('chr',1:22)
idx = c[,1] %in% chroms
d = c[idx,]
write.table(d, file='CpG_top_90.bed',row.names=F,col.names=F,quote=F,sep='\t')

abc = b[apply(b[,c(4,5,6,7)], 1, function(row) {all(row > 50)}),]

a=read.table('')
phu=a[grepl('phusio', a[,2], ignore.case=TRUE),1]
accu=a[grepl('gold', a[,2], ignore.case=TRUE),1]
gold=a[grepl('accupr', a[,2], ignore.case=TRUE),1]


write.table(phu, file='phusion.txt',row.names=F,col.names=F,quote=F,sep='\t')
write.table(accu, file='accuprime.txt',row.names=F,col.names=F,quote=F,sep='\t')
write.table(gold, file='gold.txt',row.names=F,col.names=F,quote=F,sep='\t')

samtools merge AM.Nuclear_loxAfr4.realigned_accuprime.bam `cat accuprime.txt` &
samtools merge AM.Nuclear_loxAfr4.realigned_gold.bam `cat gold.txt` &
samtools merge AM.Nuclear_loxAfr4.realigned_phusion.bam `cat phusion.txt`


## collapsed reads has a "M_" in the beginning of their names.
samtools view Batagai.Equus_cab_nucl_wChrUn.bam "chr1" | cut -f 1,10 | grep "^M_"| cut -f 2 | awk '{print length($1)}'|sort|uniq -c > collapsed_reads_batagai.txt


samtools view Yakut_Crubezy.Homo_sapiens_hg19.realigned.bam "1" | cut -f 1,10 | grep "^M_"| cut -f 2 | awk '{print length($1)}'|sort|uniq -c > collapsed_reads_yakut_homo.txt


b=read.table('foo')
ggplot(b,aes(x=V2,y=V1/sum(V1)*100))+geom_area()+scale_x_continuous(breaks=seq(0,150,10))

AM.Nuclear_loxAfr4.realigned.bam
samtools view AM.Nuclear_loxAfr4.realigned.bam "chr1" | cut -f 1,10 | grep "^M_"| cut -f 2 | awk '{print length($1)}'|sort|uniq -c > collapsed_reads_mammoth.txt
## this i need for merging
samtools view -H AM.Nuclear_loxAfr4.realigned_109.bam | grep @RG | cut -f 2 | grep -ci Pshusion


a=read.table('phasogram_AM.Nuclear_loxAfr4.realigned.txt')
xx=seq(5,150,1)
b=a[xx,]
colnames(b)=c('x','y')
mod = lm(b$y~poly(b$x,3,raw=T))
plot(b,type='line')
lines(xx,predict(mod),col='red')
b_corrected=b$y-predict(mod)
plot(b_corrected,type='line')
require(TSA)
require(zoo)
require(ggplot2)
require(reshape2)
## do not smooth
##
b_cor_smooth = rollmean(b_corrected,4,fill='extend')
df = data.frame(x=xx,corrected=b_corrected, corr_smooth=b_cor_smooth)
df_melt = melt(df,id='x')
ggplot(df_melt,aes(x,value, col=variable))+geom_line()
plot(b_cor_smoth,type='line')
## do not smooth
##
per=periodogram(b_corrected,log='yes',plot=F)
df = data.frame(x=per$freq,y=per$spec)
ggplot(df,aes(x,y))+geom_line()

find . -iname *TSS* |xargs cp -t bed_ts_site/
find . -iname *TSS* |xargs mv -t bed_ts_site/

find . -iname *bed* | xargs mv -t ../bed_ctc_f/
find . -iname *CTCF* | xargs mv -t ../bed_ctc_f/

File Edit Options Buffers Tools Help
args <- commandArgs(trailingOnly = TRUE)
input_path = args[1]
output_path = args[2]


print(args[1])
print(args[2])

a=read.table(input_path)
b=a$V2-a$V3
a=a[b==0,]
a = a[a$V5>1,]

c = data.frame(x=as.character(a$V1), y=a$V2-150,z=a$V2+150)
c$y = format(c$y, scientific = FALSE)
c$z = format(c$z, scientific = FALSE)

a$V2 = format(a$V2, scientific = FALSE)

write.table(a, file='nucleomap_0_wide.txt',row.names=F,col.names=F,quote=F,sep='\t')


a= rep(22,1000)
b=rep(0,1000)
c = seq(1000000,50000000,5000)
d = sample(c,5000)
df = as.matrix(cbind(a,b,d))
df[,2] = df[,3]-2000
s = sort.list(df[,2])
df1 = df[s,]
df2$d <- format(df2$d, scientific = FALSE) # to avoid scientific expoenent i.e. 3e10
write.table(df1, file='random_bed_coordinates.bed',row.names=F,col.names=F,quote=F,sep='\t')


zip -r chrom1_TSS_allbams.zip OUTPUT_*/*

Rscript ~/Dropbox/plot_scripts/plot_distogram.R ./ distro ~/Dropbox/plots_new/ dist_CTCF.pdf 1000
find . -empty | xargs rm
Rscript ~/Dropbox/plot_scripts/plot_basecomposition.R   /Users/kristianhanghoj/Desktop/chrom1_TSS_allbams/OUTPUT_T_hg19_1000g/ basecomp_entire plots/ base_comp_bed_T.pdf
Rscript ~/Dropbox/plot_scripts/plot_basecomposition.R   /Users/kristianhanghoj/Desktop/chrom1_TSS_allbams/OUTPUT_T_hg19_1000g/ basecompostion_nucleomap plots/ base_comp_nucl_T.pdf

Rscript ~/Dropbox/plot_scripts/plot_basecomposition.R   /Users/kristianhanghoj/Desktop/chrom1_TSS_allbams/OUTPUT_Saqqaq.hg19.flt.sort.rmdup.realign.md/ basecomp_entire plots/ base_comp_bed_SAQ.pdf
Rscript ~/Dropbox/plot_scripts/plot_basecomposition.R   /Users/kristianhanghoj/Desktop/chrom1_TSS_allbams/OUTPUT_Saqqaq.hg19.flt.sort.rmdup.realign.md/ basecompostion_nucleomap plots/ base_comp_nucl_SAQ.pdf

Rscript ~/Dropbox/plot_scripts/plot_nucleomap_bedfile.R  ./ nucleomap_bed plots/ nucle_bed.pdf

Rscript ~/Dropbox/plot_scripts/plot_methyl.R ./ methyl_ plots/ met_bed.pdf F  # this is for bed files nucleosomes
Rscript ~/Dropbox/plot_scripts/plot_methyl.R ./ methylcalled plots/ met_called_nucleosomes.pdf T  # this is for called nucleosomes

Rscript ~/Dropbox/plot_scripts/plot_phasing.R ./ phasing plots/ phas_nucleo.pdf

Rscript ~/Dropbox/plot_scripts/plot_nucleomap_score.R ./ nucleomap_reads plots/ nucl_score.pdf 

Rscript ~/Dropbox/plot_scripts/plot_distogram.R ./ distro plots/ dist.pdf 1000
Rscript ~/Dropbox/plot_scripts/plot_distogram.R ./ distro plots/ dist_short.pdf 100
Rscript ~/Dropbox/plot_scripts/plot_phaso.R ./ phaso ~/Dropbox/plots_new/ pha.pdf 3000
Rscript ~/Dropbox/plot_scripts/plot_phaso.R ./ phaso ~/Dropbox/plots_new/ pha_short.pdf 100

Rscript ~/Dropbox/plot_scripts/plot_score_vs_position.R ./ 'nucleomap_reads' ~/Desktop/chrom1_TSS_allbams/plots/ scoring.pdf 5

Rscript ~/Dropbox/plot_scripts/plot_score_vs_position.R ./ nucleomap_reads ~/Dropbox/plots_new/ nucl_count_score_chrom1.pdf 4

~/Dropbox/plot_scripts/plot_methylcopy.R ./ methyl ~/Dropbox/plots_new/ methyl_bed_TSS_facet.pdf F
~/Dropbox/plot_scripts/plot_methylcopy.R ./ methyl ~/Dropbox/plots_new/ methyl_callednucl_chrom1.pdf T
~/Dropbox/plot_scripts/plot_methylcopy.R ./ methyl ~/Dropbox/plots_new/ methyl_callednucl_chrom22.pdf T
PLOT_CREATION:
Rscript ~/Dropbox/plot_scripts/plot_basecomposition.R ./ basecompostion_nucleomap_Saqqaq.hg19.flt.sort.rmdup.realign.md ./ base_fixedy.pdf
Rscript ~/Dropbox/plot_scripts/plot_nucleo_sites_nonlinear.R ~/Google\ Drive/data/nucleomap/ 'sub' ~/Desktop/ nonlinear.pdf
Rscript ~/Dropbox/plot_scripts/plot_phasing.R ./ phasing ./ phas_nucleo.pdf
Rscript ~/Dropbox/plot_scripts/plot_distogram.R ./ distro ./ dist.pdf 1000
Rscript ~/Dropbox/plot_scripts/plot_phaso.R ./ phaso ./ pha.pdf 3000
Rscript ~/Dropbox/plot_scripts/plot_nucleomap_bedfile.R ./ nucleomap_bed ./ XXX.pdf 
Rscript ~/Dropbox/plot_scripts/plot_nucleomap_score.R ./ nucleomap_bed ./ XXX.pdf 
Rscript ~/Dropbox/plot_scripts/plot_methyl.R ./ methyl ./ met.pdf T  # this is for called nucleosomes
Rscript ~/Dropbox/plot_scripts/plot_methyl.R ./ methyl ./ met.pdf F  # this is for bed files nucleosomes

#####
Rscript ~/Dropbox/plot_scripts/plot_fourier.R ~/Desktop/ distrogramtralala.txt ~/Desktop/ tralala.pdf 4
#####

/disk/ginzburg/data/ludovic/FROM-franklin/FRIEND/FRIEND/144.206.203.215/horses/mammoth/RERUN-Met-May5/results_AM.Nuclear.ALL.M4CA/dnacomp_genome.csv
A,C,G,T
0.296185039368,0.203850351906,0.20376836645,0.296196242276


A,C,G,T
0.29526968616,0.204455666477,0.204575362689,0.295699284674


a=read.table('distrogram_AM.Nuclear_loxAfr4.realigned.txt')
require(ggplot2)
abc=pwelch(a[,2],window=2,plot=FALSE)
df = data.frame(freq=abc$freq,spec=abc$spec)
ggplot(df[1:500,],aes(freq,spec))+geom_line()+scale_y_log10()

in server:
find ./OUTPUT_* -iname '*CTCF*' | rename 's/CTCF/TSS/'
find ./OUTPUT_* -iname '*methyl_*' | rename 's/methyl_/methyl_bed/'

# mac:
for file in *.dat ; do mv $file ${file//ABC/XYZ} ; done


samtools mpileup test.bam | cut -f 4 | gzip > pile.test.bam

a=read.table('OUTPUT_Saqqaq.hg19.flt.sort.rmdup.realign.md/nucleomap_Saqqaq.hg19.flt.sort.rmdup.realign.md.txt')
b=a$V2-a$V3
a=a[b==0,]
a = a[a$V5>0,]
c = data.frame(a$V1, a$V2-1000,a$V2+1000)
write.table(c, file='saqqaqnucleomap_0_wide.txt',row.names=F,col.names=F,quote=F,sep='\t')

a=read.table('out_nucleomap_testhg19ctcf_6kb.txt')
a=read.table('out_nucleomap_testhg19ctcf_2kb.txt')
require(ggplot2)
require(zoo)
#ggplot(a[40:(nrow(a)-40),],aes(V1,rollsmooth(V2,25,'extend')))+geom_line()
a$zeroes = 0

#ggplot(a[40:(nrow(a)-40),],aes(V1,roll))+geom_ribbon(aes(ymin=zeroes,ymax=roll))+geom_line()
a$roll = rollmean(a$V2,25,'extend')
ggplot(a,aes(V1,roll))+geom_area()
ggplot(a[20:(nrow(a)-60),],aes(V1,V2))+geom_area()


 neat oneliner
 ggplot(a[40:(nrow(a)-40),],aes(V1,rollmean(V2,25,'extend')))+geom_line()
 10_49423817_49423817

require(zoo)
require(ggplot2)
require(gridExtra)
fun=function(x,y){
a=read.table(x)
a$V3 = rollmean(a$V2,y,'extend')
p = ggplot(a[20:(nrow(a)-50),],aes(V1,V3))+geom_line()+labs(title=x)
p
}
x = list.files('~/Desktop',pattern='nucleomap_bed')
p = lapply(x,fun)
do.call(grid.arrange, p)

awk '{gsub("_","\t");print}' test | cut -f 1,4,5
##################
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >saqqaq/log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b denisova/T_hg19_1000g.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >denisova/log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b labrana/LaBrana.Hg19.realigned.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >labrana/log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b altaiNea/AltaiNea.hg19_1000g.22.dq.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed >altaiNea/log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b laziridis/LBK.hg19_1000g.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >laziridis/LBKlog.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b laziridis/Loschbour.hg19_1000g.bam.1 -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >laziridis/LOSCHlog.txt &
nohup nice -n 19 ~/install/scripts/executescript_server.sh -b clovis/Clovis.flt.sort.rmdup.realign.md.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "22" >clovis/log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server_w_chr.sh -b gamba_nat_comm_2014/10.3_finalBam_rmdup_30bp.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "chr22" >gamba_nat_comm_2014/10.3log.txt &
nohup nice -n 19 ~/install/scripts/executescript_server_w_chr.sh -b gamba_nat_comm_2014/8.4_1st_2nd_merged_cutadapt_raw_F4_sort_rmdup_30bp.bam -f ~/data/nucleosomes/reference/hs.build37.1.fa -b ~/data/nucleosomes/bedfiles/testhg19ctcf.bed "chr22" >gamba_nat_comm_2014/8.4log.txt &
##################

##################

bedtools intersect -a nucleophasing_nucleomap_Saqqaq.hg19.flt.sort.rmdup.realign.md.txt -b without_chr_1_tss_2kb.bed -sorted -wb > output1.txt

sort -k1,1 -k2,2n housekeeping_200bp.bed >housekeeping_200bp_sorted.bed
bedtools intersect -a phased_gt_4.txt -b housekeeping_200bp_sorted.bed -sorted -wb > output1.txt  ## found 600 out of 1800

##################

1869 genes_22

 bedtools intersect -wa -wb \
    -a query.bed \
    -b d1.bed d2.bed d3.bed \
    -sorted \
    -filenames

bedtools intersect -a newnucleo.bed -b genes_22 > output.txt

wc -l
204004 output.txt
99536 newnucleo.bed

cut -f 2 output.txt | uniq| wc -l
61741


bedtools intersect -a phasing500.bed -b genes_22 > output.txt
cut -f 2 output.txt | uniq| wc -l
12779
## 12779 of the 19612 phases overlap a gene.
wc -l phasing500.bed
19612 phasing500.bed

newnucleo.bed is simply out_nucleomap from chrom22 with new method and chr added before 22. only 0-wide nucleosomes.

bedtools intersect -a phasing500gt3.bed -b genes_22 > output.txt
6264 phasing500gt3.bed
cut -f 2 output.txt |sort| uniq| wc -l
4378

sort -s -n -k4,4 output.txt |tail

require(ggplot2)
require(gridExtra)
fun = function(new,old,name){
a=read.table(new)
b=read.table(old)
a_sort = a[order(a[,4],decreasing=TRUE),]
hmm = sprintf("chr%d:%d-%d\t%d\n", a_sort[,1],a_sort[,2],a_sort[,3],a_sort[,4])
cat(hmm[1:10])
p1 = ggplot(b,aes(V2,V4))+geom_point()+coord_cartesian(ylim=c(0,70)) + labs(title=sum(b[,4]>=4))
p = ggplot(a,aes(V2,V4))+geom_point()+coord_cartesian(ylim=c(0,70)) + labs(title=sum(a[,4]>=4))
pdf(name)
grid.arrange(p,p1)
dev.off()
}
fun('new.txt','old.txt','phasing500.pdf')
fun('new_300.txt','old_300.txt','phasing300.pdf')
fun('new_400.txt','old_400.txt','phasing400.pdf')

nohup nice -n 19 time --output=newmethodtime.txt python ~/install/python_scripts/nucleomap_reads.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam --chrom 22 --start 0 --end 60000000 --out out_nucleomap_newmethod.txt & 
nohup nice -n 19 time --output=oldmethodtime.txt python ~/install/python_scripts/nucleomap.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam --chrom 22 --start 0 --end 60000000 --out out_nucleomap_oldmethod.txt & 
nohup nice -n 19 time --output=methodtime_bed_6kb.txt python ~/install/python_scripts/nucleomap_reads_bedinput.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/bedfiles/testhg19ctcf_6kb.bed --out out_nucleomap_testhg19ctcf_6kb.txt &
nohup nice -n 19 time --output=methodtime_bed_2kb.txt python ~/install/python_scripts/nucleomap_reads_bedinput.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/bedfiles/testhg19ctcf.bed --out out_nucleomap_testhg19ctcf_2kb.txt &
nice -n 19 time --output=methodtime_bed_2kb.txt python ~/install/python_scripts/nucleomap_reads_bedinput.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/bedfiles/mixtureCTCF.bed --out out_nucleomap_testhg19ctcf_2kb.txt &


time python -m cProfile -s time ~/research/projects/epiomix/nucleosome/nucleomap_reads.py test.bam --chrom 22 --start 0 --end 20200000 --out new.txt

#new = read.table('tranew')
#old = read.table('old.txt')
old = read.table('new2.txt')
new = read.table('new1.txt')
dim(new);dim(old)
require(ggplot2)
new_1 = new$V2-new$V3
old_1 = old$V2-old$V3
new = new[new_1==0,]
old = old[old_1==0,]
dim(new);dim(old)
sum(new[,2]%in%old[,2])
ggplot(new,aes(V2,V5))+geom_point(col='red',alpha=.4)+geom_point(data=old,aes(V2,V5),alpha=.4)
ggplot(new,aes(V5))+geom_bar(stat='bin',col='red',fill='red',binwidth=0.05,alpha=.4)+geom_bar(stat='bin',fill='green',col='green',binwidth=0.05,data=old,aes(V5),alpha=.4)

cat test.bam | python rmdup_collapsed.py >test_colladpsed.bam
nohup cat Ust_Ishim.hg19_1000g.all.bam | python ~/install/python_scripts/rmdup_collapsed.py > Ust_Ishim.hg19_1000g.all.rmdup.bam &

picard takes up seriuos amount of memory

# next thing picard.
java -jar ~/install/picard-tools-1.119/MarkDuplicates.jar I=test.bam O=test_marked.bam M=trash.bam
##yeha

WARNING	2015-01-07 18:36:52	AbstractDuplicateFindingAlgorithm	Default READ_NAME_REGEX '[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*' did not match read name '_13253892_#GCCAAT'.  You may need to specify a READ_NAME_REGEX in order to correctly identify optical duplicates.  Note that this message will not be emitted again even if other read names do not match the regex.



nohup nice -n 19 python -u ~/install/python_scripts/nucleomap.py Saqqaq.hg19.flt.sort.rmdup.realign.md.bam --chrom 22 --out out_nucleomap_chr22.txt &
the -u  flag combined with a stdout.write put stuff into log in nohup. nice.

nice -n 19 python /home/krishang/install/python_scripts/methylX_bases.py /home/krishang/data/nucleosomes/reference/hs.build37.1.fa /home/krishang/data/nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam  /home/krishang/data/nucleosomes/bedfiles/testhg19ctcf.bed  --out nosubsample &

python ~/research/projects/epiomix/nucleosome/phasing.py doesnucleomapworks.txt
Rscript testphasing.R

nice -n 19 python ~/install/python_scripts/nucleomap.py  Saqqaq.hg19.flt.sort.rmdup.realign.md.bam --bed ../bedfiles/testhg19ctcf.bed &
nice -n 19 python ~/install/python_scripts/nucleomap.py  Saqqaq.hg19.flt.sort.rmdup.realign.md.bam --bed ../bedfiles/mixtureCTCF.bed &

python -c "import sys; print sum(int(l) for l in sys.stdin)"
cut -f 4 out_phasing.txt | sort |uniq |  python -c "import sys; print sum(int(l) for l in sys.stdin)"
cut -f 4 out_phasing.txt | python -c "import sys; print sum(int(l) for l in sys.stdin)"

require(ggplot2)
require(zoo)
files = list.files(pattern='*Saq*')
pdf(file="~/Desktop/plot2.pdf")
Test <- lapply(files, function(x) {
  a <- read.table(x)
  b = a[a[,1]>=-10 & a[,1]<=2020,]
  c = b[,2]/b[,3]
  # d = data.frame(x=b[,1],y=c)
  d = data.frame(x=b[,1],y=c)
  d$smooth = rollmean(d$y,25,fill='extend')
  p=ggplot(data=d,aes(x=x,y=smooth))
  print(p+geom_line()+labs(title=x))
})
dev.off()


require(ggplot2)
pdf('test.pdf')
ggplot(a,aes()


a=read.table('out_gc_content.txt')
b = split(a,a$V1)
xnames = names(b)
TVs = c()
for (i in xnames){
x = data.frame(b[[i]])
grandmean = sum(x[,3])/sum(x[,4]+1)
TV = 0.5*sum((abs(x[,3]/(x[,4]+1) - grandmean) * (x[,4]+1))/ sum(x[,4]+1) )
TVs = c(TVs,TV/grandmean)  # divide by grandmean to normalize
}
TVs



maxtv = which.max(TVs)
maxtv = seq(31,500,10)[maxtv]
df = b[[as.character(maxtv)]]

df$ratio = df$V3/(df$V4)
df$ratio[is.na(df$ratio)]=0
df$gc_content = df[,2]/df[1,1]
zero_pad = c(-0.1,-0.05,1,1.05)
span = 0.2
winsize=maxtv
tab_means=c()
tabsize = 3

fun = function(x){
dat = unlist(df[,5])
mean(dat[x:(x+tabsize)])
}
roll = seq(0,dim(df)[1],tabsize)
tab_means = unlist(lapply(roll,fun))
#tab_means = c()
#for (i in roll){
#	tab_means= c(tab_means,mean(df[i:i+tabsize,5], na.rm=TRUE))
#}

names(tab_means) = (seq(0,dim(df)[1],tabsize)+tabsize)
oldpts = (as.numeric(names(tab_means)))/winsize
origpts = c(oldpts,zero_pad)
rates = c(tab_means,rep(0,length(zero_pad)))
newpts = (0:winsize)/winsize
#interp = loess(rates~origpts,span = span)
interp = loess(rates~origpts)
predvec= predict(interp,newpts)
eps = 0.0001
predvec[predvec< max(predvec,na.rm=TRUE)*eps] = 0
pdf('plot.pdf')
plot(newpts,predvec,type = 'l')
#lines(oldpts,tab_means)
#lines(oldpts,interp$fitted)
title(sprintf('Span: %f',span))
dev.off()


## back to python
## 
gcpile = read.table('out_pileup_gcline.txt.gz')

tmppreds = as.numeric(predvec[gcpile[,1]+1])
origline =tmppreds
reads_orig= as.integer(gcpile[,2])
k = 1000 # chunks of thousands
mapa = ceiling(length(origline)/k)
reads = ceiling(length(reads_orig)/k)
x = 1:mapa

fun1 = function(x){
	mean(origline[(1+k*(x-1)):min(k*x,length(origline))])
}

fun2 = function(x){
	mean(reads_orig[(1+k*(x-1)):min(k*x,length(reads_orig))])
}

mapa = parallel::mclapply(x,fun, mc.cores=5)
reads = parallel::mclapply(x,fun2, mc.cores=5)

reads = unlist(reads)
mapa = unlist(mapa)
norm1K = (reads)/(mapa+0.01)
norm1K[abs(norm1K)>200] =0
require(ggplot2)
require(reshape2)
temp = melt(norm1K[1:10000])
pdf('normalized.pdf')
p = ggplot(temp,aes(x=1:dim(temp)[1],y=value))
print(p+geom_line())
#plot(norm1K, type='l')
dev.off()
#write.table(df_new, file='testofgccorrect.txt',row.names=F,col.names=F,quote=F,sep='\t')
write.table(a, file='newnucleo.bed',row.names=F,col.names=F,quote=F,sep='\t')

nice -n 19 python ~/install/python_scripts/gccorrect.py ~/data/nucleosome/reference/chrome22/chrome.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosome/reference/testofchrome22/chr22_51_50.40000-20000.mappability --out gccorrd_chr22_09_mappa_all_lengths &

nice -n 19 python ~/install/python_scripts/gccorrect.py ~/data/nucleosomes/reference/chrome22/chrome.fa ~/data/nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/reference/chrome22_51/chrom22_51_50.40000-20000.mappability --readlengths ../readlengths.txt --out gccorrd_chr22_09_mappa_all_lengths_51mappalength &
/reference/chrome22_51/chrom22_51_50.40000-20000.mappability

nohup nice -n 19 python ~/install/python_scripts/pileup_gline.py /home/krishang/data/nucleosomes/reference/hs.build37.1.fa /home/krishang/data/nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/reference/testofchrome22/chr22_31_50.40000-20000.mappability 51  &

/usr/bin/time --verbose python ...

b = split(a,a$V1)

nohup nice -n 19 python ~/install/python_scripts/gccorrect.py /home/krishang/data/nucleosomes/reference/hs.build37.1.fa /home/krishang/data/nucleosomes/saqqaq/Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ~/data/nucleosomes/reference/testofchrome22/chr22_31_50.40000-20000.mappability --readlengths readlengths.txt &

require(ggplot2)
require(reshape2)
b=melt(a,id=c('V1','V2','new'))
ggplot(b,aes(x=V2,y=new,col=factor(V1)))+geom_line()
a$V4=a$V4*2
b = split(a,a$V1)
xnames = names(b)
TVs = c()
for (i in xnames){
x = data.frame(b[[i]])
grandmean = sum(x[,3])/sum(x[,4]+1)
TV = 0.5*sum((abs(x[,3]/(x[,4]+1) - grandmean) * (x[,4]+1))/ sum(x[,4]+1) )
TVs = c(TVs,TV/grandmean)  # divide by grandmean to normalize
}
TVs

maxtv = which.max(TVs)-1+31
In this case it was 56..
df = b[[as.character(maxtv)]]

for (i in 1:dim(a)[1]){
a[i,2] = a[i,2]/a[i,1]
}
a$new = a$V3/a$V4



pdf('hist1.pdf')
hist(gcpile[,2])
dev.off()
jump = (6/2)-1




xvar  = floor(xvar/jump)*jump 

nohup  nice -n 19 python ~/install/python_scripts/gc_corr_read_lengths.py ../reference/chrome22/chrome.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../reference/testofchrome22/chr22_31_50.40000-20000.mappability --out gccorrd.txt &

a=read.table('gccorrd_new1234')
require(ggplot2)
require(reshape2)
b = melt(a,id='V1')
b$V1=b$V1/140 # 140 because length of fragment
p=ggplot(b,aes(V1,value, col=variable))
p+geom_line()

ind = 'something'
len = 000
a=read.table(ind)
require(ggplot2)
require(reshape2)
colnames(a) = c('GC_content', 'Read count', 'bin count')
b = melt(a,id='GC_content')
b[,1]=b[,1]/len
p=ggplot(b,aes(GC_content,value,col=variable))
p+geom_line()


frag = a[,2]
locs = a[,3]
grandmean = sum(frag)/sum(locs+1)
TV = 0.5*sum((abs(frag/(locs+1) - grandmean) * (locs+1))/ sum(locs+1) )
TV
TV/grandmean



 nice -n 19 python ~/install/python_scripts/gc_corr_copy.py ../reference/split_chrom/1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../reference/split_chrom/mappa/chr1_31_50.40000-20000.mappability --out gccorrd_new1234&

## samtools view -h -b  /disk/franklin/data/ludovic/Nucleosomes/LaBrana/LaBrana.Hg19.realigned.bam MT > test.bam

creates a subset of data from mitochondria. with header and everything
see http://en.wikipedia.org/wiki/SAMtools

ps -u krishang | grep -i bwa | awk {'print $1'} | xargs kill -9

## install own packages on franklin server
python setup.py install --user

## get read length distribution
samtools view Saqqaq.hg19.flt.sort.rmdup.realign.md.bam | head -n 20000000 | cut -f 10 | perl -ne 'chomp;print length($_) . "\n"' | sort | uniq -c
samtools view test.bam | awk '{print length($10)}' | head -1000 | sort -u

## nice yield of mutual exclusive regions 
# def rand_parts(seq, n, l):
#     indices = xrange(len(seq) - (l - 1) * n)
#     result = []
#     offset = 0
#     for i in sorted(random.sample(indices, n)):
#         i += offset
#         result.append(seq[i:i+l])
#         offset += l - 1
#     return result


## get median of read length frequency data / count data
first remove read below 30
b = read.table('lengthdistri123_random1')
b = b[b[,2]>=30,]
b$V3 = cumsum(b$V1)
c = length(b$V3)/20  # 20 because the 5% quantile
d = which(c<=b[,3])[1]
b[d,]
# for saqqaq we get a read length of 31.

## this is for multiply out the data.

d=c()
for (i in 1:dim(b)[1]){
a = rep(b[i,2],b[i,1])
d=c(d,a) 
}

test = b$V3<=med
row = max(which(test == TRUE))
b[row,]

### GC - content:
cd ~/data/nucleosomes/saqqaq/gc_content
nice -n 19 python ~/install/python_scripts/gc_content.py ../../reference/hs.build37.1.fa ../Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../../reference/testofchrome22/chr22_31_50.40000-20000.mappability &

nice -n 19 python ~/install/python_scripts/gc_corr.py ../../reference/hs.build37.1.fa ../Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../../reference/testofchrome22/chr22_31_50.40000-20000.mappability &


#http://seqanswers.com/forums/archive/index.php/t-12576.html
The kind of normalization I was thinking about is based on a property of the sequence and not relative to other samples.
Independent of this library-size correction for multiple samples you might want to normalize for mappability within a 
single sample, for example like so:

corrected_cvg[i] = coverage[i] / mappability[i]

where coverage is the read count per position and mappability gives you for each position i the percentage of mappable positions
in a window around that position i. The size of the window should be related to the length of your reads,
since e.g. for a library with readlength 100 the number of reads overlapping 
each position i can only be influenced by the mappability in the interval [i-100..i+100].



## to extract all reads	on a specific chromosome:
samtools view Saqqaq.hg19.flt.sort.rmdup.realign.md.bam '22' | cut -f 3 | uniq	-c
19277749 22  ## almost 20 million reads on chrom22

## all chromosomes
samtools view Saqqaq.hg19.flt.sort.rmdup.realign.md.bam | cut -f 3 | uniq -c > NO_reads_each_chrom &

## samtools view -h -b /disk/franklin/data/ludovic/Nucleosomes/LaBrana/LaBrana.Hg19.realigned.bam 22:10,000,000-30,000,000 > test.bam

## samtools index test.bam test.bam.bai
indexes file

make pileup
## samtools mpileup test.bam > pile


take out information about chr, position, depth
## cut -f1,2,4 pile > actualpile 

takes the first 200000 characters in pythondata1
## cut -c1-200000 pythondata1 >newfile.txt 

take the first 2000 lines
## head -2000 actualpile > newtxt.txt


get line number for a position
cat newtxt.txt | grep -n 16055106

get base composition
cut -f1,2,5 pile > basecomp


to get fasta.fa.fai: 
(remember to check what fasta file (build) that has been used for the analysis of a bam file. in this case it is build 37)
### samtools faidx fasta.fa


to get summary values of some data in terminal: exchange "mapnucleo" with file of interest
### Rscript -e 'x<-scan("mapnucleo");summary(x)'

Rscript -e "x<-scan('dingdong', what=list(chrom=0,pos=0,score=0),sep='\\\t');summary(x$score);summary(unlist(x[3]))"


downloaded a bed file of transcriptional startsites from ucsc:
Group: Genes and Gene Prediction Tracks
track: UCSC Genes
table: known genes
output format: selected fields...

a= read.table('chr22genes_plus.gz')
head(a)
a$V4 = a$V3 + 1000
a$V3 = a$V3 -1000

require(dplyr)
b = select(a,V1,V3,V4)
write.table(b,file='chr22_TSS',row.names=F,col.names=F,quote=F,sep='\t')


#### terminal graph:
Rscript -e "a = read.table('mine.txt');require(ggplot2);p = ggplot(data=a,aes(V1));p+geom_bar(binwidth=1)"

# make small sample of CTCF files
a=read.table('hg19_CTCF_plusminus1000_1.bed')
b=a[a[,1]=='chr22',]
c = b[b[,4]=='+',]
write.table(c,file='small22CTCF.bed',row.names=F,col.names=F,quote=F,sep='\t')

require(ggplot2)
require(reshape2)
a = read.table('distochr22_saqqaq_both')
a = a[(!(a>1e3))]
a= melt(a)
p = ggplot(a,aes(value))
p+geom_histogram(binwidth=5)

### basecomposition ## this works.........

n_nucleo=1
filenames = 'single'
require(ggplot2)
require(reshape2)
a = read.table(filenames,h=T)
b = a/rowSums(a)
b = na.omit(b)
b$xvalue = (1:dim(b)[1])*n_nucleo
c = melt(b,id='xvalue')
p = ggplot(data=c,aes(x=xvalue,y=value,group=variable, col=variable))
p+geom_line()



n_nucleo=2
filenames = 'dinucleo'
require(ggplot2)
require(reshape2)
a = read.table(filenames,h=T)
b = a/rowSums(a)
b = na.omit(b)
b$xvalue = (1:dim(b)[1])*n_nucleo
c = melt(b,id='xvalue')
p = ggplot(data=c,aes(x=xvalue,y=value,group=variable, col=variable))
p+geom_line()

## this works.........
RR = rowSums(b[,c('AA','AG','GA','GG')])
YY = rowSums(b[,c('CC','CT','TC','TT')])

df = data.frame(cbind('rr'=RR,'yy'=YY,'xvalue'=(1:dim(b)[1])*n_nucleo))
c = melt(df,id='xvalue')
p = ggplot(data=c,aes(x=xvalue,y=value,group=variable, col=variable))
p+geom_line()
n_nucleo=4
filenames = 'tetra'
require(ggplot2)
require(reshape2)
a = read.table(filenames,h=T)
b = a/rowSums(a)
b$xvalue = (1:dim(b)[1])*n_nucleo

RR = rowSums(b[,grep('AA|AG|GA|GG',names(b))])
YY = rowSums(b[,grep('CC|CT|TC|TT',names(b))])
df = data.frame(cbind('rr'=RR,'yy'=YY,'xvalue'=(1:dim(b)[1])*n_nucleo))
c = melt(df,id='xvalue')
p = ggplot(data=c,aes(x=xvalue,y=value,group=variable, col=variable))
p+geom_line()


# plotting nucleomap and pileup together
a = read.table('short_pileup_hg19')
require(ggplot2)
p = ggplot(data=a,aes(V2,V3))
map = read.table('out_mapnucleo_hg19.txt')
p + geom_line() + geom_point(data=map,aes(V2,V4),col='blue') + labs(y='depth',x='chromosome 12')


require(ggplot2)
require(reshape2)
#a = read.table('subsample_0_80_Saqqaq')
a = read.table('entire_genome')
b = a[a$V1<=1e3,]
p = ggplot(b,aes(x=V1,y=V2))
#p+geom_histogram(binwidth=5)
p+geom_line()
p+geom_line() + coord_cartesian(xlim = c(10, 200))


### methylation
require(ggplot2)
a =read.table('out_mapmethyl.txt')
b = a[a[,1]>=-10,]
c = b[,2]/b[,3]
d = data.frame(x=b[,1],y=c)
p=ggplot(data=d,aes(x=x,y=y))
p+geom_smooth()

require(zoo)

a=read.table('out_mapmethylX_bases.txt')
a$new = a[,3]/a[,4]
a$new[is.na(a$new)] = 0
a$smooth = rollmean(a$new,25,fill='extend')
p=ggplot(a,aes(x=V2,y=smooth,col=as.factor(V1+1)))
p+geom_line()+guides(col = guide_legend(title = "Read position\n(1 based)"))+labs(title='CTCF sites human ± 1kb', x='relative genomic positions', y='frequency')

nice -n 19 python /home/krishang/install/python_scripts/methyl.py /home/krishang/data/nucleosomes/reference/hs.build37.1.fa Saqqaq.hg19.flt.sort.rmdup.realign.md.bam ../bedfiles/testhg19ctcf.bed &


positions = c()
top = c()
bottom=c()
thejump = 10
for (idx in seq(1,dim(b)[1],thejump)){

    top = c(top, mean(b[idx:idx+thejump,2]))
    bottom = c(bottom, mean(b[idx:idx+thejump,3]))
    positions = c(positions, mean(b[idx:idx+thejump,1]))
}

d_smooth = data.frame(x=positions,y=top/bottom)
p=ggplot(data=d_smooth,aes(x=x,y=y))
p+geom_line()
p+geom_smooth()

require(ggplot2)
files = list.files(pattern='*Saq*')
for (fi in files){

    a =read.table(fi)
        b = a[a[,1]>=-10 & a[,1]<=2020,]
            print(dim(b))
                c = b[,2]/b[,3]
                    d = data.frame(x=b[,1],y=c)
                        p=ggplot(data=d,aes(x=x,y=y))

    pdf(paste0('../plots/nosmooth',paste0(fi,'.pdf')))
    #    print(p+geom_smooth(data=d,aes(x=x,y=y)))
        print(p+geom_line(data=d,aes(x=x,y=y)) +
            coord_cartesian(ylim=c(0,0.1)))

dev.off()
}
